{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/HomeOwnerActiveJobsPage/done.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport JobPosting from \"../ContractorActiveJobsPage/jobpostingCompleted\";\nimport api from '../api/api';\nimport styles from './styles.module.css';\nimport { Grid } from '@material-ui/core';\nimport LoadingView from '../ResuableComponents/loadingView';\n\nconst Done = () => {\n  _s();\n\n  const [completedJobs, setCompletedJobs] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getCompletedJobs = () => {\n    api.getCompletedJobs().then(res => {\n      console.log(\"Job loaded successfully\");\n      console.log(res);\n      setCompletedJobs(res.data[\"completedJobs\"]); //change [] with .get\n\n      setLoading(false);\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getCompletedJobs();\n  }, []);\n\n  const renderCompletedJobs = () => {\n    let i = 0;\n    let completedJobCount = completedJobs.length;\n\n    if (completedJobCount === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }\n      }, \"It seems you don't have any Completed Jobs.\"));\n    } else {\n      let tempJobs = [];\n\n      while (i < completedJobCount) {\n        let completedJob = completedJobs[i];\n        let jobTitle = completedJob.title;\n        let jobId = completedJob.id;\n        let contractorName = completedJob.contractorFirstName;\n        let location = completedJob.locationDetail;\n        var serviceTypeList = completedJob.serviceTypeList; // var serviceTypeList = str.split(',');\n\n        let avatar = completedJob.downloadurl[0];\n        let userId = completedJob.contractorId;\n        tempJobs.push( /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(JobPosting, {\n          userId: userId,\n          avatar: avatar,\n          complete: 1,\n          id: jobId,\n          title: jobTitle,\n          name: contractorName,\n          location: location,\n          serviceList: serviceTypeList,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }\n        })));\n        i += 1;\n      }\n\n      return tempJobs;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(LoadingView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 22\n    }\n  }) : renderCompletedJobs()));\n};\n\n_s(Done, \"oeiwRy5Ia3KBXnkYfEVsdpMXPco=\");\n\n_c = Done;\nexport default Done;\nexport { Done };\n\nvar _c;\n\n$RefreshReg$(_c, \"Done\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/HomeOwnerActiveJobsPage/done.js"],"names":["React","useEffect","useState","JobPosting","api","styles","Grid","LoadingView","Done","completedJobs","setCompletedJobs","loading","setLoading","getCompletedJobs","then","res","console","log","data","catch","err","renderCompletedJobs","i","completedJobCount","length","tempJobs","completedJob","jobTitle","title","jobId","id","contractorName","contractorFirstName","location","locationDetail","serviceTypeList","avatar","downloadurl","userId","contractorId","push","gridContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport JobPosting from \"../ContractorActiveJobsPage/jobpostingCompleted\";\nimport api from '../api/api';\nimport styles from './styles.module.css';\nimport { Grid } from '@material-ui/core';\nimport LoadingView from '../ResuableComponents/loadingView';\n\nconst Done = () => {\n    const [completedJobs, setCompletedJobs] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const getCompletedJobs = () => {\n        api.getCompletedJobs().then(res => {\n            console.log(\"Job loaded successfully\");\n            console.log(res);\n            setCompletedJobs(res.data[\"completedJobs\"]); //change [] with .get\n            setLoading(false);\n        }).catch(err => console.log(err))\n    }\n\n    useEffect(() => {\n      setLoading(true);\n        getCompletedJobs();\n      },[]);\n    const renderCompletedJobs = () => {\n        let i = 0;\n        let completedJobCount = completedJobs.length;\n        if (completedJobCount===0){\n          return(\n            <div>\n              <p>It seems you don't have any Completed Jobs.</p>\n            </div>\n          )\n        }\n        else{\n        let tempJobs = [];\n        while (i < completedJobCount) {\n          let completedJob = completedJobs[i]\n          let jobTitle = completedJob.title\n          let jobId = completedJob.id\n          let contractorName = completedJob.contractorFirstName\n          let location = completedJob.locationDetail\n          var serviceTypeList = completedJob.serviceTypeList;\n          // var serviceTypeList = str.split(',');\n          let avatar = completedJob.downloadurl[0]\n          let userId = completedJob.contractorId\n\n          tempJobs.push(\n            <Grid item>\n              <JobPosting userId={userId} avatar={avatar} complete= {1} id={jobId} title={jobTitle} name={contractorName} location={location} serviceList={serviceTypeList}/>\n            </Grid>\n          );\n          i += 1;\n        }\n        return tempJobs;}\n      };\n    return(\n      <div className={styles.gridContainer}>\n        <Grid container spacing={2} justify=\"left\">\n            {loading?<LoadingView/>:renderCompletedJobs()}\n        </Grid>\n      </div>\n    )\n\n};\n\nexport default Done;\nexport {Done};"]},"metadata":{},"sourceType":"module"}