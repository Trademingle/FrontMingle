{"ast":null,"code":"// import app from 'firebase/app'; \n// import from 'firebase/messaging';\nimport firebase from 'firebase';\nimport api from '../api/api';\nimport \"firebase/auth\"; // const config = {\n//     apiKey: \"AIzaSyBYt8_7KADYF1fsBKF0wxOG5_SWY2lPyDk\",\n//     authDomain: \"booktrades-8f170.firebaseapp.com\",\n//     databaseURL: \"https://booktrades-8f170.firebaseio.com\",\n//     projectId: \"booktrades-8f170\",\n//     storageBucket: \"booktrades-8f170.appspot.com\",\n//     messagingSenderId: \"810334480356\",\n//     appId: \"1:810334480356:web:ab2a8b8241701e2c3789f1\",\n//     measurementId: \"G-G8QBQWQNTE\"\n// };\n// var config = {\n//     apiKey: \"AIzaSyARTjraxEpZqygB62W10x_ISKjzh0NsY5c\",\n//     authDomain: \"booktrades-ef251.firebaseapp.com\",\n//     databaseURL: \"https://booktrades-ef251.firebaseio.com\",\n//     projectId: \"booktrades-ef251\",\n//     storageBucket: \"booktrades-ef251.appspot.com\",\n//     messagingSenderId: \"95103237352\",\n//     appId: \"1:95103237352:web:81873c6a9b042f834d1d5d\"\n// };\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst config = {\n  apiKey: \"AIzaSyARTjraxEpZqygB62W10x_ISKjzh0NsY5c\",\n  authDomain: \"booktrades-ef251.firebaseapp.com\",\n  databaseURL: \"https://booktrades-ef251.firebaseio.com\",\n  projectId: \"booktrades-ef251\",\n  storageBucket: \"booktrades-ef251.appspot.com\",\n  messagingSenderId: \"95103237352\",\n  appId: \"1:95103237352:web:81873c6a9b042f834d1d5d\",\n  measurementId: \"G-2RZCGYRG5W\"\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.signup = (email, password, dob, address) => this.auth().createUserWithEmailAndPassword(email, password);\n\n    this.app = firebase.initializeApp(config);\n    this.auth = this.app.auth();\n    this.googleProvider = new firebase.auth.GoogleAuthProvider(); // this.emailProvider = new firebase.auth.EmailAuthProvider();\n    // debugger; \n\n    this.emailProvider = this.app.firebase_.auth.EmailAuthProvider; // console.log(this.app.firebase_.auth.EmailAuthProvider.credential())\n  } // *** Auth API ***\n\n\n  registerMessaging() {\n    this.messaging = this.app.messaging();\n    const messaging = this.messaging;\n    Notification.requestPermission().then(async function () {\n      messaging.getToken({\n        vapidKey: 'BElgJfbDxG4CjtcSZzwDKLSz_s23S8GWxekpqx-MFgh1ELI4afdHKsJOmNWKh3iN5VPHRTEfR9gtUbWn3PVOmy0'\n      }).then(currentToken => {\n        if (currentToken) {\n          api.sendMessagingToken(currentToken);\n        } else {\n          console.log('No registration token available. Request permission to generate one.');\n        }\n      }).catch(err => {\n        console.log('An error occurred while retrieving token. ', err);\n      });\n    }).catch(function (err) {\n      console.log(\"Unable to get permission to notify.\", err);\n    });\n    messaging.onMessage(payload => {\n      console.log('Message received. ', payload);\n\n      if (window.location.href.includes(\"InboxPage\")) {\n        console.log('On messaging');\n      } else {\n        console.log('not on messaging');\n      }\n\n      window.postMessage(payload, window.location.href);\n    });\n  }\n\n  login(email, password) {\n    return this.auth.signInWithEmailAndPassword(email, password);\n  }\n\n  logout() {\n    return this.auth.signOut();\n  }\n\n  async register(email, password) {\n    return this.auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  isInitialized() {\n    return new Promise(resolve => {\n      this.auth.onAuthStateChanged(resolve);\n    });\n  }\n\n}\n\nexport const firebase_instance = new Firebase();\nexport const auth = firebase.auth;\nexport default firebase_instance;","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/Firebase/firebase.js"],"names":["firebase","api","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","signup","dob","address","app","initializeApp","GoogleAuthProvider","emailProvider","firebase_","EmailAuthProvider","registerMessaging","messaging","Notification","requestPermission","then","getToken","vapidKey","currentToken","sendMessagingToken","console","log","catch","err","onMessage","payload","window","location","href","includes","postMessage","login","logout","register","isInitialized","Promise","resolve","onAuthStateChanged","firebase_instance"],"mappings":"AAAA;AACA;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAO,eAAP,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,kCAFD;AAGXC,EAAAA,WAAW,EAAE,yCAHF;AAIXC,EAAAA,SAAS,EAAE,kBAJA;AAKXC,EAAAA,aAAa,EAAE,8BALJ;AAMXC,EAAAA,iBAAiB,EAAE,aANR;AAOXC,EAAAA,KAAK,EAAE,0CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;;AAWA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,GAAG;AAAA,SA4DdC,gCA5Dc,GA4DqB,CAACC,KAAD,EAAQC,QAAR,KAC/B,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CA7DU;;AAAA,SA+DdG,4BA/Dc,GA+DiB,CAACJ,KAAD,EAAQC,QAAR,KAC3B,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAhEU;;AAAA,SAkEdK,kBAlEc,GAkEO,MACjB,KAAKJ,IAAL,CAAUK,eAAV,CAA0B,KAAKC,cAA/B,CAnEU;;AAAA,SAqEdC,SArEc,GAqEF,MAAM,KAAKP,IAAL,CAAUQ,OAAV,EArEJ;;AAAA,SAuEdC,eAvEc,GAuEIX,KAAK,IAAI,KAAKE,IAAL,CAAUU,sBAAV,CAAiCZ,KAAjC,CAvEb;;AAAA,SAyEda,gBAzEc,GAyEKZ,QAAQ,IACzB,KAAKC,IAAL,CAAUY,WAAV,CAAsBC,cAAtB,CAAqCd,QAArC,CA1EY;;AAAA,SA4Ede,MA5Ec,GA4EL,CAAChB,KAAD,EAAQC,QAAR,EAAkBgB,GAAlB,EAAuBC,OAAvB,KACJ,KAAKhB,IAAL,GAAYC,8BAAZ,CAA2CH,KAA3C,EAAkDC,QAAlD,CA7ES;;AACV,SAAKkB,GAAL,GAAWjC,QAAQ,CAACkC,aAAT,CAAuBhC,MAAvB,CAAX;AACA,SAAKc,IAAL,GAAY,KAAKiB,GAAL,CAASjB,IAAT,EAAZ;AAEA,SAAKM,cAAL,GAAsB,IAAItB,QAAQ,CAACgB,IAAT,CAAcmB,kBAAlB,EAAtB,CAJU,CAKV;AACA;;AACA,SAAKC,aAAL,GAAqB,KAAKH,GAAL,CAASI,SAAT,CAAmBrB,IAAnB,CAAwBsB,iBAA7C,CAPU,CAQV;AACH,GAVU,CAYX;;;AAEAC,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,SAAL,GAAiB,KAAKP,GAAL,CAASO,SAAT,EAAjB;AACA,UAAMA,SAAS,GAAG,KAAKA,SAAvB;AACAC,IAAAA,YAAY,CAACC,iBAAb,GAAiCC,IAAjC,CAAsC,kBAAiB;AACrDH,MAAAA,SAAS,CAACI,QAAV,CAAmB;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAnB,EAA0HF,IAA1H,CAAgIG,YAAD,IAAkB;AAC3I,YAAIA,YAAJ,EAAkB;AACd7C,UAAAA,GAAG,CAAC8C,kBAAJ,CAAuBD,YAAvB;AACH,SAFD,MAEO;AACHE,UAAAA,OAAO,CAACC,GAAR,CAAY,sEAAZ;AACH;AACA,OANP,EAMSC,KANT,CAMgBC,GAAD,IAAS;AAChBH,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DE,GAA1D;AACD,OARP;AASD,KAVD,EAWCD,KAXD,CAWO,UAASC,GAAT,EAAc;AACjBH,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDE,GAAnD;AACH,KAbD;AAcAX,IAAAA,SAAS,CAACY,SAAV,CAAqBC,OAAD,IAAa;AAC/BL,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCI,OAAlC;;AACA,UAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,QAArB,CAA8B,WAA9B,CAAH,EAA8C;AAC5CT,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,OAFD,MAEK;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;;AACDK,MAAAA,MAAM,CAACI,WAAP,CAAmBL,OAAnB,EAA4BC,MAAM,CAACC,QAAP,CAAgBC,IAA5C;AACD,KARD;AASD;;AACDG,EAAAA,KAAK,CAAC7C,KAAD,EAAQC,QAAR,EAAkB;AACrB,WAAO,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAAP;AACD;;AAED6C,EAAAA,MAAM,GAAG;AACP,WAAO,KAAK5C,IAAL,CAAUQ,OAAV,EAAP;AACD;;AAEa,QAARqC,QAAQ,CAAC/C,KAAD,EAAQC,QAAR,EAAkB;AAC9B,WAAO,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CAAP;AAED;;AAED+C,EAAAA,aAAa,GAAG;AACd,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,WAAKhD,IAAL,CAAUiD,kBAAV,CAA6BD,OAA7B;AACD,KAFM,CAAP;AAGD;;AA1DU;;AAiFf,OAAO,MAAME,iBAAiB,GAAG,IAAIvD,QAAJ,EAA1B;AACP,OAAO,MAAMK,IAAI,GAAGhB,QAAQ,CAACgB,IAAtB;AACP,eAAekD,iBAAf","sourcesContent":["// import app from 'firebase/app'; \n// import from 'firebase/messaging';\nimport firebase from 'firebase';\nimport api from '../api/api';\nimport \"firebase/auth\"\n// const config = {\n//     apiKey: \"AIzaSyBYt8_7KADYF1fsBKF0wxOG5_SWY2lPyDk\",\n//     authDomain: \"booktrades-8f170.firebaseapp.com\",\n//     databaseURL: \"https://booktrades-8f170.firebaseio.com\",\n//     projectId: \"booktrades-8f170\",\n//     storageBucket: \"booktrades-8f170.appspot.com\",\n//     messagingSenderId: \"810334480356\",\n//     appId: \"1:810334480356:web:ab2a8b8241701e2c3789f1\",\n//     measurementId: \"G-G8QBQWQNTE\"\n// };\n\n// var config = {\n//     apiKey: \"AIzaSyARTjraxEpZqygB62W10x_ISKjzh0NsY5c\",\n//     authDomain: \"booktrades-ef251.firebaseapp.com\",\n//     databaseURL: \"https://booktrades-ef251.firebaseio.com\",\n//     projectId: \"booktrades-ef251\",\n//     storageBucket: \"booktrades-ef251.appspot.com\",\n//     messagingSenderId: \"95103237352\",\n//     appId: \"1:95103237352:web:81873c6a9b042f834d1d5d\"\n// };\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst config = {\n    apiKey: \"AIzaSyARTjraxEpZqygB62W10x_ISKjzh0NsY5c\",\n    authDomain: \"booktrades-ef251.firebaseapp.com\",\n    databaseURL: \"https://booktrades-ef251.firebaseio.com\",\n    projectId: \"booktrades-ef251\",\n    storageBucket: \"booktrades-ef251.appspot.com\",\n    messagingSenderId: \"95103237352\",\n    appId: \"1:95103237352:web:81873c6a9b042f834d1d5d\",\n    measurementId: \"G-2RZCGYRG5W\"\n  };\n\nclass Firebase {\n    constructor() {\n        this.app = firebase.initializeApp(config);\n        this.auth = this.app.auth();\n        \n        this.googleProvider = new firebase.auth.GoogleAuthProvider(); \n        // this.emailProvider = new firebase.auth.EmailAuthProvider();\n        // debugger; \n        this.emailProvider = this.app.firebase_.auth.EmailAuthProvider\n        // console.log(this.app.firebase_.auth.EmailAuthProvider.credential())\n    }\n    \n    // *** Auth API ***\n\n    registerMessaging(){\n      this.messaging = this.app.messaging();\n      const messaging = this.messaging;\n      Notification.requestPermission().then(async function() {\n        messaging.getToken({vapidKey: 'BElgJfbDxG4CjtcSZzwDKLSz_s23S8GWxekpqx-MFgh1ELI4afdHKsJOmNWKh3iN5VPHRTEfR9gtUbWn3PVOmy0'}).then((currentToken) => {\n              if (currentToken) {\n                  api.sendMessagingToken(currentToken);\n              } else {\n                  console.log('No registration token available. Request permission to generate one.');\n              }\n              }).catch((err) => {\n                console.log('An error occurred while retrieving token. ', err);\n              });\n      })\n      .catch(function(err) {\n          console.log(\"Unable to get permission to notify.\", err);\n      });\n      messaging.onMessage((payload) => {\n        console.log('Message received. ', payload)\n        if(window.location.href.includes(\"InboxPage\")){\n          console.log('On messaging');\n        }else{\n          console.log('not on messaging');\n        }\n        window.postMessage(payload, window.location.href);\n      });\n    }\n    login(email, password) {\n      return this.auth.signInWithEmailAndPassword(email, password)\n    }\n  \n    logout() {\n      return this.auth.signOut()\n    }\n  \n    async register(email, password) {\n      return this.auth.createUserWithEmailAndPassword(email, password)\n      \n    }\n  \n    isInitialized() {\n      return new Promise(resolve => {\n        this.auth.onAuthStateChanged(resolve)\n      })\n    }\n\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n    \n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password); \n        \n    doSignInWithGoogle = () =>\n        this.auth.signInWithPopup(this.googleProvider);\n    \n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n \n    doPasswordUpdate = password =>\n      this.auth.currentUser.updatePassword(password);\n\n    signup = (email, password, dob, address) => \n         this.auth().createUserWithEmailAndPassword(email, password);\n}\n\nexport const firebase_instance = new Firebase();\nexport const auth = firebase.auth; \nexport default firebase_instance; \n"]},"metadata":{},"sourceType":"module"}