{"ast":null,"code":"import _slicedToArray from\"/Users/nandupokhrel/Desktop/BookTrades/trademingle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import JobPosting from'../ContractorActiveJobsPage/jobpostingCompleted';import api from'../api/api';import{Grid}from'@material-ui/core';import{makeStyles}from'@material-ui/core/styles';var useStyles=makeStyles(function(theme){return{root:{display:'flex',flexWrap:'wrap',justifyContent:'space-around',overflow:'hidden',backgroundColor:theme.palette.background.paper},gridList:{flexWrap:'nowrap',// Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\ntransform:'translateZ(0)'}};});var Done=function Done(props){var classes=useStyles();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cCompletedJobs=_useState2[0],setCCompletedJobs=_useState2[1];var contractorId={};contractorId[\"id\"]=props.id;var getCCompletedJobs=function getCCompletedJobs(){api.getCCompletedJobsByClients(contractorId).then(function(res){console.log(\"Job loaded successfully\");console.log(res);setCCompletedJobs(res.data[\"completedJobs\"]);//change [] with .get\n}).catch(function(err){return console.log(err);});};useEffect(function(){getCCompletedJobs();},[]);var renderCompletedJobs=function renderCompletedJobs(){var i=0;var completedJobCount=cCompletedJobs.length;var tempJobs=[];while(i<completedJobCount&&i<5){var completedJob=cCompletedJobs[i];var jobTitle=completedJob.title;var jobId=completedJob.id;var contractorName=completedJob.clientFirstName;var location=completedJob.locationDetail;var serviceTypeList=completedJob.serviceTypeList;// var serviceTypeList = str.split(',');\nvar avatar=completedJob.downloadurl[0];var userId=completedJob.clientId;tempJobs.push(/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(JobPosting,{userId:userId,avatar:avatar,complete:1,id:jobId,title:jobTitle,name:contractorName,location:location,serviceList:serviceTypeList})));i+=1;}return tempJobs;};if(cCompletedJobs.length===0){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",null,\"It seems like this contractor doesn't have any completed jobs.\"));}else{return/*#__PURE__*/React.createElement(\"div\",{className:classes.root},/*#__PURE__*/React.createElement(Grid,{cellHeight:300,container:true,direction:\"row\",justify:\"center\",alignItems:\"center\"},renderCompletedJobs()));}// return(\n//     <div className={classes.root}>\n//       <GridList cellHeight={300} cols={2.5} className={classes.gridList}>\n//           {renderCompletedJobs()}\n//       </GridList>\n//     </div>\n// )\n};export default Done;export{Done};","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/ProfileView/done.js"],"names":["React","useEffect","useState","JobPosting","api","Grid","makeStyles","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","Done","props","classes","cCompletedJobs","setCCompletedJobs","contractorId","id","getCCompletedJobs","getCCompletedJobsByClients","then","res","console","log","data","catch","err","renderCompletedJobs","i","completedJobCount","length","tempJobs","completedJob","jobTitle","title","jobId","contractorName","clientFirstName","location","locationDetail","serviceTypeList","avatar","downloadurl","userId","clientId","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport JobPosting from '../ContractorActiveJobsPage/jobpostingCompleted';\nimport api from '../api/api';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)',\n  },\n}));\nconst Done = (props) => {\n  const classes = useStyles();\n    const [cCompletedJobs, setCCompletedJobs] = useState([]);\n    let contractorId= {}\n    contractorId[\"id\"] =props.id\n    const getCCompletedJobs = () => {\n        api.getCCompletedJobsByClients(contractorId).then(res => {\n            console.log(\"Job loaded successfully\");\n            console.log(res);\n            setCCompletedJobs(res.data[\"completedJobs\"]); //change [] with .get\n        }).catch(err => console.log(err))\n    }\n\n    useEffect(() => {\n        getCCompletedJobs();\n      },[]);\n    const renderCompletedJobs = () => {\n        let i = 0;\n        let completedJobCount = cCompletedJobs.length;\n        let tempJobs = [];\n        while (i < completedJobCount && i<5) {\n          let completedJob = cCompletedJobs[i]\n          let jobTitle = completedJob.title\n          let jobId = completedJob.id\n          let contractorName = completedJob.clientFirstName\n          let location = completedJob.locationDetail\n          var serviceTypeList = completedJob.serviceTypeList;\n          // var serviceTypeList = str.split(',');\n          let avatar = completedJob.downloadurl[0]\n          let userId= completedJob.clientId\n          tempJobs.push(\n            <Grid item>\n              <JobPosting userId={userId} avatar={avatar} complete= {1} id={jobId} title={jobTitle} name={contractorName} location={location} serviceList={serviceTypeList}/>\n            </Grid>\n          );\n          i += 1;\n        }\n        return tempJobs;}\n\n      if (cCompletedJobs.length===0){\n        return(\n          <div>\n            <p>It seems like this contractor doesn't have any completed jobs.</p>\n          </div>\n        )\n      }\n      else{\n        return(\n            <div className={classes.root}>\n              <Grid cellHeight={300} container direction=\"row\" justify=\"center\" alignItems=\"center\">\n                  {renderCompletedJobs()}\n              </Grid>\n            </div>\n        )\n            }\n    // return(\n    //     <div className={classes.root}>\n    //       <GridList cellHeight={300} cols={2.5} className={classes.gridList}>\n    //           {renderCompletedJobs()}\n    //       </GridList>\n    //     </div>\n    // )\n\n};\n\nexport default Done;\nexport {Done};"]},"metadata":{},"sourceType":"module"}