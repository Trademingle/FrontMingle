{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/SearchResults/search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport styled from 'styled-components'; // const Label = styled('label')`\n//   padding: 0 0 4px;\n//   line-height: 1.5;\n//   display: block;\n// `;\n\nconst InputWrapper = styled('div')`\n  width: 300px;\n  border: 1px solid #000000;\n  background-color: #ffffff;\n  border-radius: 4px;\n  padding: 1px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: left;\n\n  &:hover {\n    border-color: #40a9ff;\n  }\n\n  &.focused {\n    border-color: #40a9ff;\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n\n  & input {\n    font-size: 14px;\n    height: 40px;\n    box-sizing: border-box;\n    padding: 4px 6px;\n    width: 0;\n    min-width: 30px;\n    flex-grow: 1;\n    border: 0;\n    margin: 0;\n    outline: 0;\n  }\n`;\n_c = InputWrapper;\nconst Tag = styled(({\n  label,\n  onDelete,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }\n}, label), /*#__PURE__*/React.createElement(CloseIcon, {\n  onClick: onDelete,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }\n})))`\n  display: flex;\n  align-items: center;\n  height: 24px;\n  margin: 2px;\n  line-height: 18px;\n  background-color: #ffffff;\n  border: 2px solid #2B64D2;\n  border-radius: 38px;\n  box-sizing: content-box;\n  padding: 0 4px 0 10px;\n  outline: 0;\n  overflow: hidden;\n  color:#2B64D2;\n\n  &:focus {\n    border-color: #40a9ff;\n    background-color: #e6f7ff;\n  }\n\n  & span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  & svg {\n    font-size: 14px;\n    cursor: pointer;\n    padding: 4px;\n  }\n`;\n_c2 = Tag;\nconst Listbox = styled('ul')`\n  width: 300px;\n  margin: 2px 0 0;\n  padding: 0;\n  position: absolute;\n  list-style: none;\n  background-color: #fff;\n  overflow: auto;\n  max-height: 250px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  z-index: 1;\n\n  & li {\n    padding: 5px 12px;\n    display: flex;\n\n    & span {\n      flex-grow: 1;\n    }\n\n    & svg {\n      color: transparent;\n    }\n  }\n\n  & li[aria-selected='true'] {\n    background-color: #fafafa;\n    font-weight: 600;\n\n    & svg {\n      color: #1890ff;\n    }\n  }\n\n  & li[data-focus='true'] {\n    background-color: #e6f7ff;\n    cursor: pointer;\n\n    & svg {\n      color: #000;\n    }\n  }\n`; // const choosingList = [[{ title: \"English\" },\n// { title: \"Nepali\" },\n// { title: \"Hindi\" },\n// { title: \"Spanish\" },\n// { title: \"French\" },\n// { title: \"Chinese\" },\n// { title: \"Russian\" },\n// { title: \"Portugese\" },\n// { title: \"Inodnesian\" },\n// { title: \"Italian\" },\n// { title: \"Japanese\" },\n// { title: \"Marathi\" },\n// { title: \"Bengali\" },\n// { title: \"Tamil\" },\n// { title: \"Urdu\" },\n// { title: \"Sewdish\" },\n// { title: \"Korean\" },\n// { title: \"Irish\" },\n// { title: \"Finnish\" },\n// { title: \"Dutch\" },\n// { title: \"Romanian\" },\n// { title: \"Slovak\" },\n// { title: \"Ukrainian\"}, ],\n// [{ title: \"Electrical\"},\n// { title: \"Plumbing\" },\n// { title: \"Carpentry\" },\n// { title: \"Alarm Systems\" },\n// { title: \"Roofing\" },\n// { title: \"Painting\" },\n// { title: \"Construction\" },\n// { title: \"Others\" }]]; \n\n_c3 = Listbox;\nexport default function CustomizedHook(props) {\n  _s();\n\n  // const selected = props.information[props.type].map((value)=>{\n  //   return {title:value}\n  // })\n  // const languages = all_languages.map((item)=>{\n  //   return {title:item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\n  // })\n  // const services = service_types.map((item)=>{\n  //   return {title:item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\n  // })\n  // const all_options = {'services':services, languages:languages}\n  // const options_list = all_options[props.type]\n  let selected_option;\n\n  for (const option of props.options) {\n    if (option.title === props.selected) {\n      // debugger;\n      selected_option = option;\n    }\n  }\n\n  const {\n    getRootProps,\n    getInputProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n    value,\n    focused,\n    setAnchorEl\n  } = useAutocomplete({\n    id: 'customized-hook-demo' + props.options.length + props.type,\n    multiple: true,\n    options: props.options,\n    getOptionLabel: option => option.title,\n    defaultValue: [selected_option] // defaultValue: [choosingList[index][0]]\n\n  }); // if (props.options != options){\n  //   debugger;\n  //   setOptions(props.options)\n  // }\n\n  return /*#__PURE__*/React.createElement(NoSsr, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(InputWrapper, {\n    ref: setAnchorEl,\n    style: {\n      paddingLeft: 25,\n      width: 228\n    },\n    className: focused ? 'focused' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, value.map((option, index) => {\n    const optionProps = getTagProps({\n      index\n    });\n    const currOnDelete = optionProps.onDelete;\n\n    const newOnDelete = event => {\n      // debugger;\n      currOnDelete(event);\n\n      if ('type' in props) {\n        const newArr = [...value];\n        newArr.splice(index, 1);\n        props.information[props.type] = newArr.map(val => val.title);\n        props.setInformation({ ...props.information\n        });\n      }\n    };\n\n    optionProps.onDelete = newOnDelete;\n    return /*#__PURE__*/React.createElement(Tag, Object.assign({\n      label: option ? option.title : 'N/A'\n    }, optionProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 22\n      }\n    }));\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    placeholder: props.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  })))), groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(Listbox, Object.assign({}, getListboxProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }), groupedOptions.map((option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    const currOnClick = optionProps.onClick;\n\n    const newOnClick = event => {\n      currOnClick(event);\n\n      if ('type' in props) {\n        props.information[props.type] = [...value.map(val => val.title), event.target.innerText];\n        props.setInformation({ ...props.information\n        });\n      }\n    };\n\n    optionProps.onClick = newOnClick;\n    return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, optionProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, option.title), /*#__PURE__*/React.createElement(CheckIcon, {\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }));\n  })) : null));\n}\n\n_s(CustomizedHook, \"BpGswFHzK3WzZUvCDtbF58FFlJw=\", false, function () {\n  return [useAutocomplete];\n});\n\n_c4 = CustomizedHook;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"InputWrapper\");\n$RefreshReg$(_c2, \"Tag\");\n$RefreshReg$(_c3, \"Listbox\");\n$RefreshReg$(_c4, \"CustomizedHook\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/SearchResults/search.js"],"names":["React","useEffect","useState","useAutocomplete","NoSsr","CheckIcon","CloseIcon","styled","InputWrapper","Tag","label","onDelete","props","Listbox","CustomizedHook","selected_option","option","options","title","selected","getRootProps","getInputProps","getTagProps","getListboxProps","getOptionProps","groupedOptions","value","focused","setAnchorEl","id","length","type","multiple","getOptionLabel","defaultValue","paddingLeft","width","map","index","optionProps","currOnDelete","newOnDelete","event","newArr","splice","information","val","setInformation","placeholder","currOnClick","onClick","newOnClick","target","innerText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGD,MAAM,CAAC,KAAD,CAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/BA;KAAMC,Y;AAiCN,MAAMC,GAAG,GAAGF,MAAM,CAAC,CAAC;AAAEG,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmB,KAAGC;AAAtB,CAAD,kBACjB,6CAASA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAOF,KAAP,CADF,eAEE,oBAAC,SAAD;AAAW,EAAA,OAAO,EAAEC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CADgB,CAKf;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApCA;MAAMF,G;AAsCN,MAAMI,OAAO,GAAGN,MAAM,CAAC,IAAD,CAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3CA,C,CA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MA3EMM,O;AA8EN,eAAe,SAASC,cAAT,CAAwBF,KAAxB,EAA+B;AAAA;;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,MAAIG,eAAJ;;AACA,OAAK,MAAMC,MAAX,IAAqBJ,KAAK,CAACK,OAA3B,EAAmC;AACjC,QAAID,MAAM,CAACE,KAAP,KAAiBN,KAAK,CAACO,QAA3B,EAAoC;AACtC;AACIJ,MAAAA,eAAe,GAAGC,MAAlB;AACD;AACF;;AAED,QAAM;AACJI,IAAAA,YADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,eAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA,KAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA;AATI,MAUFzB,eAAe,CAAC;AAClB0B,IAAAA,EAAE,EAAE,yBAAwBjB,KAAK,CAACK,OAAN,CAAca,MAAtC,GAA+ClB,KAAK,CAACmB,IADvC;AAElBC,IAAAA,QAAQ,EAAE,IAFQ;AAGlBf,IAAAA,OAAO,EAAEL,KAAK,CAACK,OAHG;AAIlBgB,IAAAA,cAAc,EAAGjB,MAAD,IAAYA,MAAM,CAACE,KAJjB;AAKlBgB,IAAAA,YAAY,EAAE,CAACnB,eAAD,CALI,CAMlB;;AANkB,GAAD,CAVnB,CArB4C,CAwC5C;AACA;AACA;AACA;;AACA,sBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,6CAAUK,YAAY,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEQ,WAAnB;AAAgC,IAAA,KAAK,EAAE;AAACO,MAAAA,WAAW,EAAC,EAAb;AAAiBC,MAAAA,KAAK,EAAC;AAAvB,KAAvC;AAAoE,IAAA,SAAS,EAAET,OAAO,GAAG,SAAH,GAAe,EAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACW,GAAN,CAAU,CAACrB,MAAD,EAASsB,KAAT,KAAmB;AAC5B,UAAMC,WAAW,GAAGjB,WAAW,CAAC;AAAEgB,MAAAA;AAAF,KAAD,CAA/B;AACA,UAAME,YAAY,GAAGD,WAAW,CAAC5B,QAAjC;;AACA,UAAM8B,WAAW,GAAIC,KAAD,IAAU;AAC5B;AACAF,MAAAA,YAAY,CAACE,KAAD,CAAZ;;AACA,UAAI,UAAU9B,KAAd,EAAoB;AAClB,cAAM+B,MAAM,GAAG,CAAC,GAAGjB,KAAJ,CAAf;AACAiB,QAAAA,MAAM,CAACC,MAAP,CAAcN,KAAd,EAAoB,CAApB;AACA1B,QAAAA,KAAK,CAACiC,WAAN,CAAkBjC,KAAK,CAACmB,IAAxB,IAAgCY,MAAM,CAACN,GAAP,CAAWS,GAAG,IAAGA,GAAG,CAAC5B,KAArB,CAAhC;AACAN,QAAAA,KAAK,CAACmC,cAAN,CAAqB,EAAC,GAAGnC,KAAK,CAACiC;AAAV,SAArB;AACD;AACF,KATD;;AAUAN,IAAAA,WAAW,CAAC5B,QAAZ,GAAuB8B,WAAvB;AACA,wBAAO,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAEzB,MAAM,GAACA,MAAM,CAACE,KAAR,GAAc;AAAhC,OAA2CqB,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACA,GAfD,CADH,eAmBE,+CAAWlB,aAAa,EAAxB;AAA4B,IAAA,WAAW,EAAET,KAAK,CAACoC,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnBF,CAFF,CADF,EAyBGvB,cAAc,CAACK,MAAf,GAAwB,CAAxB,gBACC,oBAAC,OAAD,oBAAaP,eAAe,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGE,cAAc,CAACY,GAAf,CAAmB,CAACrB,MAAD,EAASsB,KAAT,KAAmB;AACrC,UAAMC,WAAW,GAAGf,cAAc,CAAC;AAAER,MAAAA,MAAF;AAAUsB,MAAAA;AAAV,KAAD,CAAlC;AACA,UAAMW,WAAW,GAAGV,WAAW,CAACW,OAAhC;;AACA,UAAMC,UAAU,GAAIT,KAAD,IAAU;AAC3BO,MAAAA,WAAW,CAACP,KAAD,CAAX;;AACA,UAAI,UAAU9B,KAAd,EAAoB;AAClBA,QAAAA,KAAK,CAACiC,WAAN,CAAkBjC,KAAK,CAACmB,IAAxB,IAAgC,CAAC,GAAGL,KAAK,CAACW,GAAN,CAAUS,GAAG,IAAGA,GAAG,CAAC5B,KAApB,CAAJ,EAAgCwB,KAAK,CAACU,MAAN,CAAaC,SAA7C,CAAhC;AACAzC,QAAAA,KAAK,CAACmC,cAAN,CAAqB,EAAC,GAAGnC,KAAK,CAACiC;AAAV,SAArB;AACD;AACF,KAND;;AAOAN,IAAAA,WAAW,CAACW,OAAZ,GAAsBC,UAAtB;AACA,wBAAO,4CAAQZ,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOvB,MAAM,CAACE,KAAd,CADK,eAEL,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFK,CAAP;AAID,GAfA,CADH,CADD,GAmBG,IA5CN,CADF,CADF;AAkDD;;GA9FuBJ,c;UA+BlBX,e;;;MA/BkBW,c","sourcesContent":["import React, {useEffect, useState } from 'react';\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport styled from 'styled-components';\n\n// const Label = styled('label')`\n//   padding: 0 0 4px;\n//   line-height: 1.5;\n//   display: block;\n// `;\n\nconst InputWrapper = styled('div')`\n  width: 300px;\n  border: 1px solid #000000;\n  background-color: #ffffff;\n  border-radius: 4px;\n  padding: 1px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: left;\n\n  &:hover {\n    border-color: #40a9ff;\n  }\n\n  &.focused {\n    border-color: #40a9ff;\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n\n  & input {\n    font-size: 14px;\n    height: 40px;\n    box-sizing: border-box;\n    padding: 4px 6px;\n    width: 0;\n    min-width: 30px;\n    flex-grow: 1;\n    border: 0;\n    margin: 0;\n    outline: 0;\n  }\n`;\n\nconst Tag = styled(({ label, onDelete, ...props }) => (\n  <div {...props}>\n    <span>{label}</span>\n    <CloseIcon onClick={onDelete} />\n  </div>\n))`\n  display: flex;\n  align-items: center;\n  height: 24px;\n  margin: 2px;\n  line-height: 18px;\n  background-color: #ffffff;\n  border: 2px solid #2B64D2;\n  border-radius: 38px;\n  box-sizing: content-box;\n  padding: 0 4px 0 10px;\n  outline: 0;\n  overflow: hidden;\n  color:#2B64D2;\n\n  &:focus {\n    border-color: #40a9ff;\n    background-color: #e6f7ff;\n  }\n\n  & span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  & svg {\n    font-size: 14px;\n    cursor: pointer;\n    padding: 4px;\n  }\n`;\n\nconst Listbox = styled('ul')`\n  width: 300px;\n  margin: 2px 0 0;\n  padding: 0;\n  position: absolute;\n  list-style: none;\n  background-color: #fff;\n  overflow: auto;\n  max-height: 250px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  z-index: 1;\n\n  & li {\n    padding: 5px 12px;\n    display: flex;\n\n    & span {\n      flex-grow: 1;\n    }\n\n    & svg {\n      color: transparent;\n    }\n  }\n\n  & li[aria-selected='true'] {\n    background-color: #fafafa;\n    font-weight: 600;\n\n    & svg {\n      color: #1890ff;\n    }\n  }\n\n  & li[data-focus='true'] {\n    background-color: #e6f7ff;\n    cursor: pointer;\n\n    & svg {\n      color: #000;\n    }\n  }\n`;\n\n// const choosingList = [[{ title: \"English\" },\n// { title: \"Nepali\" },\n// { title: \"Hindi\" },\n// { title: \"Spanish\" },\n// { title: \"French\" },\n// { title: \"Chinese\" },\n// { title: \"Russian\" },\n// { title: \"Portugese\" },\n// { title: \"Inodnesian\" },\n// { title: \"Italian\" },\n// { title: \"Japanese\" },\n// { title: \"Marathi\" },\n// { title: \"Bengali\" },\n// { title: \"Tamil\" },\n// { title: \"Urdu\" },\n// { title: \"Sewdish\" },\n// { title: \"Korean\" },\n// { title: \"Irish\" },\n// { title: \"Finnish\" },\n// { title: \"Dutch\" },\n// { title: \"Romanian\" },\n// { title: \"Slovak\" },\n// { title: \"Ukrainian\"}, ],\n// [{ title: \"Electrical\"},\n// { title: \"Plumbing\" },\n// { title: \"Carpentry\" },\n// { title: \"Alarm Systems\" },\n// { title: \"Roofing\" },\n// { title: \"Painting\" },\n// { title: \"Construction\" },\n// { title: \"Others\" }]]; \n\n\nexport default function CustomizedHook(props) {  \n  // const selected = props.information[props.type].map((value)=>{\n  //   return {title:value}\n  // })\n  // const languages = all_languages.map((item)=>{\n  //   return {title:item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\n  // })\n  // const services = service_types.map((item)=>{\n  //   return {title:item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\n  // })\n  \n  // const all_options = {'services':services, languages:languages}\n  // const options_list = all_options[props.type]\n  let selected_option;\n  for (const option of props.options){\n    if (option.title === props.selected){\n  // debugger;\n      selected_option = option;\n    }\n  }\n\n  const {\n    getRootProps,\n    getInputProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n    value,\n    focused,\n    setAnchorEl,\n  } = useAutocomplete({\n    id: 'customized-hook-demo'+ props.options.length + props.type,\n    multiple: true,\n    options: props.options,\n    getOptionLabel: (option) => option.title,\n    defaultValue: [selected_option]\n    // defaultValue: [choosingList[index][0]]\n  });\n  \n  // if (props.options != options){\n  //   debugger;\n  //   setOptions(props.options)\n  // }\n  return (\n    <NoSsr>\n      <div >\n        <div  {...getRootProps()}>\n          {/* <Label {...getInputLabelProps()}>Customized hook</Label> */}\n          <InputWrapper ref={setAnchorEl} style={{paddingLeft:25, width:228}} className={focused ? 'focused' : ''}>\n            {value.map((option, index) => {\n              const optionProps = getTagProps({ index })\n              const currOnDelete = optionProps.onDelete;\n              const newOnDelete = (event) =>{\n                // debugger;\n                currOnDelete(event);\n                if ('type' in props){\n                  const newArr = [...value]\n                  newArr.splice(index,1)\n                  props.information[props.type] = newArr.map(val=> val.title)\n                  props.setInformation({...props.information});\n                }\n              }\n              optionProps.onDelete = newOnDelete;\n              return(<Tag label={option?option.title:'N/A'} {...optionProps} />\n            )}\n            )}\n\n            <input {...getInputProps()} placeholder={props.placeholder}/>\n          </InputWrapper>\n        </div>\n        {groupedOptions.length > 0 ? (\n          <Listbox {...getListboxProps()}>\n            {groupedOptions.map((option, index) => {\n              const optionProps = getOptionProps({ option, index })\n              const currOnClick = optionProps.onClick;\n              const newOnClick = (event) =>{\n                currOnClick(event);\n                if ('type' in props){\n                  props.information[props.type] = [...value.map(val=> val.title), event.target.innerText]\n                  props.setInformation({...props.information});\n                }\n              }\n              optionProps.onClick = newOnClick\n              return(<li {...optionProps}>\n                <span>{option.title}</span>\n                <CheckIcon fontSize=\"small\" />\n              </li>)\n            })}\n          </Listbox>\n        ) : null}\n      </div>\n    </NoSsr>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}