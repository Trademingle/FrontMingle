{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/Landing/search.js\";\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport api from '../api/api';\nexport default function CustomizedHook(props) {\n  const generateOptions = options => {\n    return options.map(function (item) {\n      return {\n        title: item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()\n      };\n    });\n  }; // const index = (props.type===\"languages\") ? 0:1;\n\n\n  const choosing_options = props.type === \"languages\" ? generateOptions(api.languages) : generateOptions(api.serviceTypes); // debugger;\n\n  if (props.type === \"languages\") {\n    return /*#__PURE__*/React.createElement(Autocomplete, {\n      id: \"combo-box-demo\",\n      options: choosing_options,\n      getOptionLabel: option => option.title,\n      style: {\n        width: \"auto\"\n      },\n      onChange: (event, newValue) => {\n        if (typeof newValue == \"string\") {\n          props.information[\"query\"] = newValue;\n          props.setInformation({ ...props.information\n          });\n        } else if ('type' in props && newValue != null && 'title' in newValue) {\n          props.information[props.type] = [newValue['title']];\n          props.setInformation({ ...props.information\n          });\n        }\n      },\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        required: true,\n        style: {\n          paddingTop: 15\n        },\n        placeholder: props.placeholder,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 34\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(Autocomplete, {\n      id: \"combo-box-demo\",\n      options: choosing_options,\n      getOptionLabel: option => option.title ? option.title : option,\n      style: {\n        width: \"auto\"\n      },\n      freeSolo: true,\n      defaultValue: props.value ? props.value : null,\n      onChange: (event, newValue) => {\n        if (typeof newValue == \"string\") {\n          props.information[\"query\"] = newValue;\n          props.setInformation({ ...props.information\n          });\n        } else if ('type' in props && newValue != null && 'title' in newValue) {\n          props.information[props.type] = [newValue['title']];\n          props.information[\"query\"] = newValue['title'];\n          props.setInformation({ ...props.information\n          });\n        }\n      },\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        required: true,\n        style: {\n          paddingTop: 15\n        },\n        placeholder: props.placeholder,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 34\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    });\n  }\n}\n_c = CustomizedHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomizedHook\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/Landing/search.js"],"names":["React","TextField","Autocomplete","api","CustomizedHook","props","generateOptions","options","map","item","title","charAt","toUpperCase","slice","toLowerCase","choosing_options","type","languages","serviceTypes","option","width","event","newValue","information","setInformation","params","paddingTop","placeholder","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport api  from '../api/api';\n\nexport default function CustomizedHook(props) {\n\n  const generateOptions = (options) => {\n    return options.map(function(item) {\n      return {title: item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()};\n    });\n  }\n\n  // const index = (props.type===\"languages\") ? 0:1;\n  const choosing_options = (props.type===\"languages\") ? generateOptions(api.languages): generateOptions(api.serviceTypes)\n  // debugger;\n  if (props.type===\"languages\") {\n    return (\n      <Autocomplete\n        id=\"combo-box-demo\"\n        options={choosing_options}\n        getOptionLabel={(option) => option.title}\n        style={{ width: \"auto\" }}\n        onChange={(event, newValue) =>{\n                                        if (typeof newValue == \"string\"){\n                                          props.information[\"query\"] = newValue;\n                                          props.setInformation({...props.information});\n                                        }else if ('type' in props && newValue != null && 'title' in newValue){\n                                          props.information[props.type] = [newValue['title']];\n                                          props.setInformation({...props.information});\n                                        }\n                                      }\n                  }\n        renderInput={(params) => <TextField {...params} required style={{paddingTop: 15}} placeholder={props.placeholder} />}\n      />\n    );\n  } else{\n    return (\n      <Autocomplete\n        id=\"combo-box-demo\"\n        options={choosing_options}\n        getOptionLabel={(option) => option.title?option.title:option}\n        style={{ width: \"auto\" }}\n        freeSolo\n        defaultValue={props.value?props.value:null}\n        onChange={(event, newValue) =>{\n                                        if (typeof newValue == \"string\"){\n                                          props.information[\"query\"] = newValue;\n                                          props.setInformation({...props.information});\n                                        }else if ('type' in props && newValue != null && 'title' in newValue){\n                                          props.information[props.type] = [newValue['title']];\n                                          props.information[\"query\"] = newValue['title'];\n                                          props.setInformation({...props.information});\n                                        }\n                                      }\n                  }\n        renderInput={(params) => <TextField {...params} required style={{paddingTop: 15}} placeholder={props.placeholder} />}\n      />\n    );\n  }\n\n}"]},"metadata":{},"sourceType":"module"}