{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/AddListing/searchHooks.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport styled from 'styled-components';\nimport api from '../api/api';\nconst InputWrapper = styled('div')`\n  border: 1px solid #aaaaaa;\n  background-color: #ffffff;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: left;\n  margin-top:10px;\n  border-radius: 5px;\n  z-index:100;\n  &:hover {\n    border-color: #000000;\n  }\n\n  &.focused {\n    border-color: #40a9ff;\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n\n  & input {\n    font-size: 14px;\n    height: 50px;\n    box-sizing: border-box;\n    min-width: 30px;\n    flex-grow: 1;\n    border: 0;\n    outline: 0;\n    border-radius: 5px;\n  }\n`;\n_c = InputWrapper;\nconst Tag = styled(({\n  label,\n  onDelete,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }\n}, label), /*#__PURE__*/React.createElement(CloseIcon, {\n  onClick: onDelete,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }\n})))`\n  display: flex;\n  align-items: center;\n  height: 24px;\n  margin: 2px;\n  line-height: 22px;\n  background-color: #ffffff;\n  border: 2px solid #2B64D2;\n  border-radius: 38px;\n  box-sizing: content-box;\n  padding: 0 4px 0 10px;\n  outline: 0;\n  overflow: hidden;\n  color:#2B64D2;\n\n  &:focus {\n    border-color: #40a9ff;\n    background-color: #e6f7ff;\n  }\n\n  & span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  & svg {\n    font-size: 14px;\n    cursor: pointer;\n    padding: 4px;\n  }\n`;\n_c2 = Tag;\nconst Listbox = styled('ul')`\n  width: 300px;\n  margin: 2px 0 0;\n  padding: 0;\n  position: absolute;\n  list-style: none;\n  background-color: #fff;\n  overflow: auto;\n  max-height: 250px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  z-index: 100;\n\n  & li {\n    padding: 5px 12px;\n    display: flex;\n\n    & span {\n      flex-grow: 1;\n    }\n\n    & svg {\n      color: transparent;\n    }\n  }\n\n  & li[aria-selected='true'] {\n    background-color: #fafafa;\n    font-weight: 600;\n\n    & svg {\n      color: #1890ff;\n    }\n  }\n\n  & li[data-focus='true'] {\n    background-color: #e6f7ff;\n    cursor: pointer;\n\n    & svg {\n      color: #000;\n    }\n  }\n`;\n_c3 = Listbox;\nexport default function CustomizedHook(props) {\n  _s();\n\n  const generateOptions = options => {\n    return options.map(function (item) {\n      return {\n        title: item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()\n      };\n    });\n  }; // const index = (props.type===\"languageList\") ? 0:1;\n\n\n  const ChoosingList = props.type === \"languageList\" ? generateOptions(api.languages) : generateOptions(api.serviceTypes); // debugger\n\n  const {\n    getRootProps,\n    getInputProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n    value,\n    focused,\n    setAnchorEl\n  } = useAutocomplete({\n    multiple: true,\n    options: ChoosingList,\n    getOptionLabel: option => option.title // defaultValue: selected_option\n\n  }); // const optionProps\n\n  return /*#__PURE__*/React.createElement(NoSsr, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(InputWrapper, {\n    ref: setAnchorEl,\n    style: {\n      width: props.width,\n      textAlign: 'left'\n    },\n    className: focused ? 'focused' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, value.map((option, index) => /*#__PURE__*/React.createElement(Tag, Object.assign({\n    label: option.title\n  }, getTagProps({\n    index\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    placeholder: \"Choose from the list here..\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  })))), groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(Listbox, Object.assign({}, getListboxProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }), groupedOptions.map((option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    const currOnClick = optionProps.onClick;\n\n    const newOnClick = event => {\n      currOnClick(event); // debugger;\n\n      if ('type' in props) {\n        props.information[props.type] = [...value.map(val => val.title), event.target.innerText];\n        props.information[props.type] = [...new Set(props.information[props.type])]; //keeping unique values in the array (removing duplicates)\n      }\n    };\n\n    optionProps.onClick = newOnClick;\n    return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, optionProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, option.title), /*#__PURE__*/React.createElement(CheckIcon, {\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }));\n  })) : null));\n} // const choosingList=(props) => {\n//   if (props.type===\"serviceList\"){\n//     let i = 0;\n//     let services = api.serviceTypes;\n//     let tagsCount = services.length;\n//     let tempTags = [];\n//     while (i < tagsCount) {\n//         tempTags.push({ title: services[i]});\n//         i += 1;\n//     };\n//     return tempTags;\n//   }\n//   else{\n//     let i = 0;\n//     let services = api.languages;\n//     let tagsCount = services.length;\n//     let tempTags = [];\n//     while (i < tagsCount) {\n//         tempTags.push({ title: services[i]});\n//         i += 1;\n//     };\n//     return tempTags;\n//   }\n// };\n\n_s(CustomizedHook, \"BpGswFHzK3WzZUvCDtbF58FFlJw=\", false, function () {\n  return [useAutocomplete];\n});\n\n_c4 = CustomizedHook;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"InputWrapper\");\n$RefreshReg$(_c2, \"Tag\");\n$RefreshReg$(_c3, \"Listbox\");\n$RefreshReg$(_c4, \"CustomizedHook\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/AddListing/searchHooks.js"],"names":["React","useAutocomplete","NoSsr","CheckIcon","CloseIcon","styled","api","InputWrapper","Tag","label","onDelete","props","Listbox","CustomizedHook","generateOptions","options","map","item","title","charAt","toUpperCase","slice","toLowerCase","ChoosingList","type","languages","serviceTypes","getRootProps","getInputProps","getTagProps","getListboxProps","getOptionProps","groupedOptions","value","focused","setAnchorEl","multiple","getOptionLabel","option","width","textAlign","index","length","optionProps","currOnClick","onClick","newOnClick","event","information","val","target","innerText","Set"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,MAAMC,YAAY,GAAGF,MAAM,CAAC,KAAD,CAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA5BA;KAAME,Y;AA8BN,MAAMC,GAAG,GAAGH,MAAM,CAAC,CAAC;AAAEI,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmB,KAAGC;AAAtB,CAAD,kBACjB,6CAASA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAOF,KAAP,CADF,eAEE,oBAAC,SAAD;AAAW,EAAA,OAAO,EAAEC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CADgB,CAKf;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApCA;MAAMF,G;AAsCN,MAAMI,OAAO,GAAGP,MAAM,CAAC,IAAD,CAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3CA;MAAMO,O;AA6CN,eAAe,SAASC,cAAT,CAAwBF,KAAxB,EAA+B;AAAA;;AAE5C,QAAM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","sourcesContent":["import React from 'react';\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport styled from 'styled-components';\nimport api from '../api/api';\n\nconst InputWrapper = styled('div')`\n  border: 1px solid #aaaaaa;\n  background-color: #ffffff;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: left;\n  margin-top:10px;\n  border-radius: 5px;\n  z-index:100;\n  &:hover {\n    border-color: #000000;\n  }\n\n  &.focused {\n    border-color: #40a9ff;\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n\n  & input {\n    font-size: 14px;\n    height: 50px;\n    box-sizing: border-box;\n    min-width: 30px;\n    flex-grow: 1;\n    border: 0;\n    outline: 0;\n    border-radius: 5px;\n  }\n`;\n\nconst Tag = styled(({ label, onDelete, ...props }) => (\n  <div {...props}>\n    <span>{label}</span>\n    <CloseIcon onClick={onDelete} />\n  </div>\n))`\n  display: flex;\n  align-items: center;\n  height: 24px;\n  margin: 2px;\n  line-height: 22px;\n  background-color: #ffffff;\n  border: 2px solid #2B64D2;\n  border-radius: 38px;\n  box-sizing: content-box;\n  padding: 0 4px 0 10px;\n  outline: 0;\n  overflow: hidden;\n  color:#2B64D2;\n\n  &:focus {\n    border-color: #40a9ff;\n    background-color: #e6f7ff;\n  }\n\n  & span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  & svg {\n    font-size: 14px;\n    cursor: pointer;\n    padding: 4px;\n  }\n`;\n\nconst Listbox = styled('ul')`\n  width: 300px;\n  margin: 2px 0 0;\n  padding: 0;\n  position: absolute;\n  list-style: none;\n  background-color: #fff;\n  overflow: auto;\n  max-height: 250px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  z-index: 100;\n\n  & li {\n    padding: 5px 12px;\n    display: flex;\n\n    & span {\n      flex-grow: 1;\n    }\n\n    & svg {\n      color: transparent;\n    }\n  }\n\n  & li[aria-selected='true'] {\n    background-color: #fafafa;\n    font-weight: 600;\n\n    & svg {\n      color: #1890ff;\n    }\n  }\n\n  & li[data-focus='true'] {\n    background-color: #e6f7ff;\n    cursor: pointer;\n\n    & svg {\n      color: #000;\n    }\n  }\n`;\n\nexport default function CustomizedHook(props) {\n    \n  const generateOptions = (options) => {\n    return options.map(function(item) {\n      return {title: item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()};\n    });\n  }\n  // const index = (props.type===\"languageList\") ? 0:1;\n  const ChoosingList = (props.type===\"languageList\") ? generateOptions(api.languages): generateOptions(api.serviceTypes);\n  // debugger\n  const {\n    getRootProps,\n    getInputProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n    value,\n    focused,\n    setAnchorEl,\n  } = useAutocomplete({\n    multiple: true,\n    options: ChoosingList,\n    getOptionLabel: (option) => option.title,\n    // defaultValue: selected_option\n  });\n  // const optionProps\n\n  return (\n    <NoSsr>\n      <div >\n        <div  {...getRootProps()}>\n          {/* <Label {...getInputLabelProps()}>Customized hook</Label> */}\n          <InputWrapper ref={setAnchorEl} style={{\n            width:props.width,\n             textAlign: 'left'\n             }} className={focused ? 'focused' : ''}>\n            {value.map((option, index) => (\n              <Tag label={option.title} {...getTagProps({ index })} />\n            ))}\n\n            <input {...getInputProps()} placeholder=\"Choose from the list here..\"/>\n          </InputWrapper>\n        </div>\n        {groupedOptions.length > 0 ? (\n          <Listbox {...getListboxProps()}>\n            {groupedOptions.map((option, index) => {\n              const optionProps = getOptionProps({ option, index })\n              const currOnClick = optionProps.onClick;\n              const newOnClick = (event) =>{\n                currOnClick(event);\n                // debugger;\n                if ('type' in props){\n                  props.information[props.type] = [...value.map(val=> val.title), event.target.innerText]\n                  props.information[props.type] = [...new Set(props.information[props.type])] //keeping unique values in the array (removing duplicates)\n                }\n              }\n              optionProps.onClick = newOnClick\n              return(<li {...optionProps}>\n                <span>{option.title}</span>\n                <CheckIcon fontSize=\"small\" />\n              </li>)\n            })}\n          </Listbox>\n        ) : null}\n      </div>\n    </NoSsr>\n  );\n}\n\n// const choosingList=(props) => {\n//   if (props.type===\"serviceList\"){\n//     let i = 0;\n//     let services = api.serviceTypes;\n//     let tagsCount = services.length;\n//     let tempTags = [];\n//     while (i < tagsCount) {\n//         tempTags.push({ title: services[i]});\n//         i += 1;\n//     };\n//     return tempTags;\n//   }\n//   else{\n//     let i = 0;\n//     let services = api.languages;\n//     let tagsCount = services.length;\n//     let tempTags = [];\n//     while (i < tagsCount) {\n//         tempTags.push({ title: services[i]});\n//         i += 1;\n//     };\n//     return tempTags;\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}