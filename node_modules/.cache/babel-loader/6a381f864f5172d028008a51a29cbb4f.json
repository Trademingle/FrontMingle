{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/Maps/index.js\",\n    _s = $RefreshSig$();\n\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined'; // import {\n//   GoogleMap,\n//   useLoadScript,\n//   Marker,\n//   InfoWindow,\n//   useJsApiLoader\n// } from \"@react-google-maps/api\";\n\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react'; // import {Map as GoogleMapReact, Marker}  from 'google-maps-react';\n\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport Styles from './maps.module.css';\nimport \"@reach/combobox/styles.css\";\nimport Slider from './slider'; // const libraries = [\"places\"];\n// const mapContainerStyle = {\n//   height: \"270px\",\n//   width: \"800px\",\n//   // position: 'flex',\n//   // zIndex: '-1',\n//   borderColor: 'red',\n//   border: '10px'\n// };\n// const options = {\n//   disableDefaultUI: true,\n//   zoomControl: true,\n//   streetViewControl:false,\n//   zoomControlOptions: false,\n//   zoomControl: false,\n// };\n// const center = {\n//   lat: 43.6532,\n//   lng: -79.3832,\n// };\n// const container = {\n//   marginTop: '10%',\n//   marginRight: '28%',\n//   marginLeft: '28%',\n//   marginBottom: '-80%',\n//   // height: \"590px\",\n//   // width: \"750px\",\n//   border: '2px solid grey'\n// };\n// export default function App(props) {\n//   // const { isLoaded, loadError } = useLoadScript({\n//   //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n//   //   libraries,\n//   // });\n//   // TODO: Nandu update below\n//   let Location = props.Location;\n//   let setLocation = props.setLocation;\n//   const [markers, setMarkers] = React.useState([]);\n//   const [selected, setSelected] = React.useState(true);\n//   // const onMapClick = React.useCallback((e) => {\n//   //   debugger;\n//   //   setMarkers([\n//   //     ...markers,\n//   //     {\n//   //       lat: e.latLng.lat(),\n//   //       lng: e.latLng.lng(),\n//   //       time: new Date(),\n//   //     },\n//   //   ]);\n//   // }, []);\n//   const onMapClick = (e) => {\n//     debugger;\n//     setMarkers([\n//       ...markers,\n//       {\n//         key:'key'+e.lat.toString(),\n//         lat: e.lat,\n//         lng: e.lng,\n//         time: new Date(),\n//       },\n//     ]);\n//   }\n//   const mapRef = React.useRef();\n//   const onMapLoad = React.useCallback((map) => {\n//     mapRef.current = map;\n//   }, []);\n//   const panTo = React.useCallback(({ lat, lng }) => {\n//     mapRef.current.panTo({ lat, lng });\n//     mapRef.current.setZoom(14);\n//   }, []);\n//   // if (loadError) return \"Error\";\n//   // if (!isLoaded) return \"Loading...\";\n//   return (\n//    //hard coded the search and address, not useing material ui \n//     <div style={{height:800,width:1000, overflow:'hidden'}}>\n//        <CloseOutlinedIcon style={{ height: 40, width: 40 }} className={Styles.cross} onClick={props.close}/>\n//        <div className={Styles.topT}>\n//         <h1 className={Styles.wantSearchText}>Where do you want to search?</h1>\n//         <h1 className={Styles.addressText}>Address, City Or Province</h1>\n//       </div>\n//       <Search panTo={panTo} />\n//       <GoogleMapReact\n//         id=\"map\"\n//         mapContainerStyle={mapContainerStyle}\n//         zoom={9}\n//         center={center}\n//         options={options}\n//         onClick={onMapClick}\n//         onLoad={onMapLoad}\n//       >\n//         {markers.map(marker => (\n//           <Marker\n//             {...marker}\n//             onRightClick={() => console.log('marker click')}\n//           />\n//         ))}\n//         {/* {selected ? (\n//           <InfoWindow\n//             position={{ lat: selected.lat, lng: selected.lng }}\n//             onCloseClick={() => {\n//               setSelected(null);\n//             }}\n//           >\n//             <div>\n//               <h2>\n//                 <span role=\"img\" aria-label=\"bear\">\n//                 </span>{\" \"}\n//                 Alert\n//               </h2>\n//               <p>Spotted {formatRelative(selected.time, new Date())}</p>\n//             </div> \n//           </InfoWindow>\n//         ) : null} */}\n//       </GoogleMapReact>\n//       <div >\n//         <h1 className={Styles.bottomL}></h1>\n//         <div className={Styles.slider}>\n//           <Slider close={props.close}/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\nfunction Search({\n  panTo\n}) {\n  _s();\n\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 43.6532,\n        lng: () => -79.3832\n      },\n      radius: 100 * 1000\n    }\n  }); // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async address => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({\n        address\n      });\n      const {\n        lat,\n        lng\n      } = await getLatLng(results[0]);\n      panTo({\n        lat,\n        lng\n      });\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: Styles.search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: \"Search your location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxList, {\n    style: {\n      zIndex: 1000000,\n      background: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    style: {\n      zIndex: 1000000\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  })))));\n}\n\n_s(Search, \"D6hJ+w6b1RCkdTlt9AbdYG9Ebfw=\", false, function () {\n  return [usePlacesAutocomplete];\n});\n\n_c = Search;\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\nexport class MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showingInfoWindow: false,\n      // Hides or shows the InfoWindow\n      activeMarker: {},\n      // Shows the active marker upon click\n      selectedPlace: {} // Shows the InfoWindow to the selected place upon a marker\n\n    };\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n  }\n\n  // onMapClick = (e) => {\n  //     debugger;\n  //     setMarkers([\n  //       ...markers,\n  //       {\n  //         key:'key'+e.lat.toString(),\n  //         lat: e.lat,\n  //         lng: e.lng,\n  //         time: new Date(),\n  //       },\n  //     ]);\n  //   }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: 800,\n        width: 1000,\n        overflow: 'hidden'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CloseOutlinedIcon, {\n      style: {\n        height: 40,\n        width: 40\n      },\n      className: Styles.cross,\n      onClick: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: Styles.topT,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: Styles.wantSearchText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }\n    }, \"Where do you want to search?\"), /*#__PURE__*/React.createElement(\"h1\", {\n      className: Styles.addressText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }\n    }, \"Address, City Or Province\")), /*#__PURE__*/React.createElement(Search, {\n      panTo: this.props.panTo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat: 43.8532,\n        lng: -79.3832\n      } // onClick={onMapClick}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Kenyatta International Convention Centre',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }\n    }, this.state.selectedPlace.name)))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: Styles.bottomL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: Styles.slider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(Slider, {\n      close: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 12\n      }\n    }))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBQbOVpM2UKKRF82lw8OVr2KhKKysfjZSU'\n})(MapContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/Maps/index.js"],"names":["CloseOutlinedIcon","React","Component","Map","GoogleApiWrapper","InfoWindow","Marker","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxList","ComboboxOption","Styles","Slider","Search","panTo","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","lat","lng","radius","handleInput","e","target","handleSelect","address","results","error","console","log","search","zIndex","background","map","id","description","mapStyles","width","height","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","setState","onClose","render","overflow","cross","close","topT","wantSearchText","addressText","google","name","bottomL","slider","apiKey"],"mappings":";;;AAAA,OAAOA,iBAAP,MAA8B,kCAA9B,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,gBAAd,EAA+BC,UAA/B,EAA2CC,MAA3C,QAAyD,mBAAzD,C,CAEA;;AACA,OAAOC,qBAAP,IACEC,UADF,EAEEC,SAFF,QAGO,yBAHP;AAIA,SACEC,QADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,cAJF,QAKO,iBALP;AAMA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,4BAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA2B;AAAA;;AACzB,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAHT;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFjB,qBAAqB,C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","sourcesContent":["import CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\n// import {\n//   GoogleMap,\n//   useLoadScript,\n//   Marker,\n//   InfoWindow,\n//   useJsApiLoader\n// } from \"@react-google-maps/api\";\n\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper,InfoWindow, Marker } from 'google-maps-react';\n\n// import {Map as GoogleMapReact, Marker}  from 'google-maps-react';\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport Styles from './maps.module.css'\nimport \"@reach/combobox/styles.css\";\nimport Slider from './slider'\n\n// const libraries = [\"places\"];\n// const mapContainerStyle = {\n\n//   height: \"270px\",\n//   width: \"800px\",\n//   // position: 'flex',\n//   // zIndex: '-1',\n//   borderColor: 'red',\n//   border: '10px'\n// };\n// const options = {\n//   disableDefaultUI: true,\n//   zoomControl: true,\n//   streetViewControl:false,\n//   zoomControlOptions: false,\n//   zoomControl: false,\n  \n// };\n// const center = {\n//   lat: 43.6532,\n//   lng: -79.3832,\n// };\n\n// const container = {\n//   marginTop: '10%',\n//   marginRight: '28%',\n//   marginLeft: '28%',\n//   marginBottom: '-80%',\n//   // height: \"590px\",\n//   // width: \"750px\",\n//   border: '2px solid grey'\n// };\n// export default function App(props) {\n//   // const { isLoaded, loadError } = useLoadScript({\n//   //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n//   //   libraries,\n//   // });\n//   // TODO: Nandu update below\n//   let Location = props.Location;\n//   let setLocation = props.setLocation;\n//   const [markers, setMarkers] = React.useState([]);\n//   const [selected, setSelected] = React.useState(true);\n\n//   // const onMapClick = React.useCallback((e) => {\n//   //   debugger;\n//   //   setMarkers([\n//   //     ...markers,\n//   //     {\n//   //       lat: e.latLng.lat(),\n//   //       lng: e.latLng.lng(),\n//   //       time: new Date(),\n//   //     },\n//   //   ]);\n\n//   // }, []);\n\n//   const onMapClick = (e) => {\n//     debugger;\n//     setMarkers([\n//       ...markers,\n//       {\n//         key:'key'+e.lat.toString(),\n//         lat: e.lat,\n//         lng: e.lng,\n//         time: new Date(),\n//       },\n//     ]);\n\n//   }\n\n//   const mapRef = React.useRef();\n//   const onMapLoad = React.useCallback((map) => {\n//     mapRef.current = map;\n//   }, []);\n\n//   const panTo = React.useCallback(({ lat, lng }) => {\n//     mapRef.current.panTo({ lat, lng });\n//     mapRef.current.setZoom(14);\n//   }, []);\n\n//   // if (loadError) return \"Error\";\n//   // if (!isLoaded) return \"Loading...\";\n//   return (\n//    //hard coded the search and address, not useing material ui \n//     <div style={{height:800,width:1000, overflow:'hidden'}}>\n//        <CloseOutlinedIcon style={{ height: 40, width: 40 }} className={Styles.cross} onClick={props.close}/>\n//        <div className={Styles.topT}>\n//         <h1 className={Styles.wantSearchText}>Where do you want to search?</h1>\n//         <h1 className={Styles.addressText}>Address, City Or Province</h1>\n//       </div>\n    \n      \n//       <Search panTo={panTo} />\n      \n//       <GoogleMapReact\n//         id=\"map\"\n//         mapContainerStyle={mapContainerStyle}\n      \n//         zoom={9}\n//         center={center}\n//         options={options}\n//         onClick={onMapClick}\n//         onLoad={onMapLoad}\n//       >\n//         {markers.map(marker => (\n//           <Marker\n//             {...marker}\n//             onRightClick={() => console.log('marker click')}\n//           />\n//         ))}\n//         {/* {selected ? (\n//           <InfoWindow\n//             position={{ lat: selected.lat, lng: selected.lng }}\n//             onCloseClick={() => {\n//               setSelected(null);\n//             }}\n//           >\n//             <div>\n//               <h2>\n//                 <span role=\"img\" aria-label=\"bear\">\n                \n//                 </span>{\" \"}\n//                 Alert\n//               </h2>\n//               <p>Spotted {formatRelative(selected.time, new Date())}</p>\n//             </div> \n//           </InfoWindow>\n//         ) : null} */}\n//       </GoogleMapReact>\n//       <div >\n//         <h1 className={Styles.bottomL}></h1>\n//         <div className={Styles.slider}>\n//           <Slider close={props.close}/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 100 * 1000,\n    },\n  });\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n      panTo({ lat, lng });\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  };\n\n  return (\n    \n    <div className={Styles.search} >\n    \n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Search your location\"\n        />\n      \n          <ComboboxList style={{zIndex:1000000, background:'white'}}>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} style={{zIndex:1000000}}/>\n              ))}\n          </ComboboxList>\n      </Combobox>\n    \n    </div>\n  );\n}\n\n\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,  // Hides or shows the InfoWindow\n    activeMarker: {},          // Shows the active marker upon click\n    selectedPlace: {}          // Shows the InfoWindow to the selected place upon a marker\n  };\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  // onMapClick = (e) => {\n  //     debugger;\n  //     setMarkers([\n  //       ...markers,\n  //       {\n  //         key:'key'+e.lat.toString(),\n  //         lat: e.lat,\n  //         lng: e.lng,\n  //         time: new Date(),\n  //       },\n  //     ]);\n  //   }\n\n  render() {\n    return (\n      <div style={{height:800,width:1000, overflow:'hidden'}}>\n       <CloseOutlinedIcon style={{ height: 40, width: 40 }} className={Styles.cross} onClick={this.props.close}/>\n       <div className={Styles.topT}>\n        <h1 className={Styles.wantSearchText}>Where do you want to search?</h1>\n        <h1 className={Styles.addressText}>Address, City Or Province</h1>\n       </div>\n    \n      \n      <Search panTo={this.props.panTo} />\n      \n      <Map\n        google={this.props.google}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={\n          {\n            lat: 43.8532,\n            lng: -79.3832,\n          }\n        }\n        // onClick={onMapClick}\n      >\n        <Marker\n          onClick={this.onMarkerClick}\n          name={'Kenyatta International Convention Centre'}\n        />\n{/* //        {markers.map(marker => (\n//           <Marker\n//             {...marker}\n//             onRightClick={() => console.log('marker click')}\n//           />\n//         ))} */}\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </Map>\n      <div >\n         <h1 className={Styles.bottomL}></h1>\n         <div className={Styles.slider}>\n           <Slider close={this.props.close}/>\n         </div>\n       </div>\n     </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBQbOVpM2UKKRF82lw8OVr2KhKKysfjZSU'\n})(MapContainer);"]},"metadata":{},"sourceType":"module"}