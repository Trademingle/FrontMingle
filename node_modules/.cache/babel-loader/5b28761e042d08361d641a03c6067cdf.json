{"ast":null,"code":"import _slicedToArray from\"/Users/nandupokhrel/Desktop/BookTrades/trademingle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import ConversationList from'../ConversationList';import MessageList from'../MessageList';import styles from'./messenger.module.css';import{Route}from'react-router-dom';export default function Messenger(props){var _useState=useState({receiverId:0,receiverName:''}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];// useEffect(() => {\n//   loadMessages();\n// },[state]);\nvar updateUserId=function updateUserId(data){setState({receiverId:data.Id,receiverName:data.name});};//Temporary timer for message loading\n// const interval = setInterval(function() {\n//   loadMessages();\n// }, 10000);\nvar messagesEnd;var scrollToBottom=function scrollToBottom(){messagesEnd.scrollIntoView({behavior:\"smooth\"});};var onMessageUpdate=function onMessageUpdate(){scrollToBottom();};return/*#__PURE__*/React.createElement(\"div\",{className:styles.messenger},/*#__PURE__*/React.createElement(\"div\",{className:[styles.scrollable,styles.sidebar].join(' ')},/*#__PURE__*/React.createElement(ConversationList,{onConversationSelect:updateUserId})),/*#__PURE__*/React.createElement(\"div\",{id:\"scrollContainer\",className:[styles.scrollable,styles.content].join(' ')},/*#__PURE__*/React.createElement(Route,{path:\"/InboxPage\",render:function render(props){if(!props.location.state||!('from'in props.location.state)){props.location.state=state;};return/*#__PURE__*/React.createElement(MessageList,{name:props.location.state.receiverName,receiver:props.location.state.receiverId,onMessagesUpdate:onMessageUpdate});}}),/*#__PURE__*/React.createElement(\"div\",{style:{float:\"left\",clear:\"both\"},ref:function ref(el){messagesEnd=el;}})));}","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/Inbox/components/Messenger/index.js"],"names":["React","useState","ConversationList","MessageList","styles","Route","Messenger","props","receiverId","receiverName","state","setState","updateUserId","data","Id","name","messagesEnd","scrollToBottom","scrollIntoView","behavior","onMessageUpdate","messenger","scrollable","sidebar","join","content","location","float","clear","el"],"mappings":"yKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAA+B,OAA/B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,qBAA7B,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,wBAAnB,CACA,OAAQC,KAAR,KAAqB,kBAArB,CAGA,cAAe,SAASC,CAAAA,SAAT,CAAmBC,KAAnB,CAA0B,CAEvC,cAA0BN,QAAQ,CAAC,CACjCO,UAAU,CAAE,CADqB,CAEjCC,YAAY,CAAE,EAFmB,CAAD,CAAlC,wCAAOC,KAAP,eAAcC,QAAd,eAKA;AACA;AACA;AAEA,GAAIC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,IAAD,CAAS,CAC1BF,QAAQ,CAAC,CACPH,UAAU,CAAEK,IAAI,CAACC,EADV,CAEPL,YAAY,CAAEI,IAAI,CAACE,IAFZ,CAAD,CAAR,CAID,CALD,CAQA;AACA;AACA;AACA;AAEA,GAAIC,CAAAA,WAAJ,CACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3BD,WAAW,CAACE,cAAZ,CAA2B,CAAEC,QAAQ,CAAE,QAAZ,CAA3B,EACD,CAFD,CAGA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAE5BH,cAAc,GACf,CAHD,CAIE,mBACE,2BAAK,SAAS,CAAEb,MAAM,CAACiB,SAAvB,eAoBE,2BAAK,SAAS,CAAE,CAACjB,MAAM,CAACkB,UAAR,CAAmBlB,MAAM,CAACmB,OAA1B,EAAmCC,IAAnC,CAAwC,GAAxC,CAAhB,eACE,oBAAC,gBAAD,EAAkB,oBAAoB,CAAEZ,YAAxC,EADF,CApBF,cAwBE,2BAAK,EAAE,CAAC,iBAAR,CAA0B,SAAS,CAAE,CAACR,MAAM,CAACkB,UAAR,CAAoBlB,MAAM,CAACqB,OAA3B,EAAoCD,IAApC,CAAyC,GAAzC,CAArC,eACE,oBAAC,KAAD,EAAO,IAAI,CAAC,YAAZ,CAAyB,MAAM,CAAE,gBAACjB,KAAD,CAAU,CACzC,GAAI,CAACA,KAAK,CAACmB,QAAN,CAAehB,KAAhB,EAAyB,EAAE,QAAUH,CAAAA,KAAK,CAACmB,QAAN,CAAehB,KAA3B,CAA7B,CAA+D,CAC7DH,KAAK,CAACmB,QAAN,CAAehB,KAAf,CAAuBA,KAAvB,CACD,EACD,mBACE,oBAAC,WAAD,EACA,IAAI,CAAEH,KAAK,CAACmB,QAAN,CAAehB,KAAf,CAAqBD,YAD3B,CAEA,QAAQ,CAAEF,KAAK,CAACmB,QAAN,CAAehB,KAAf,CAAqBF,UAF/B,CAGA,gBAAgB,CAAEY,eAHlB,EADF,CAMD,CAVD,EADF,cAYE,2BAAK,KAAK,CAAE,CAAEO,KAAK,CAAC,MAAR,CAAgBC,KAAK,CAAE,MAAvB,CAAZ,CACI,GAAG,CAAE,aAACC,EAAD,CAAQ,CAAEb,WAAW,CAAGa,EAAd,CAAmB,CADtC,EAZF,CAxBF,CADF,CAkDH","sourcesContent":["import React, { useState} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport styles from './messenger.module.css';\nimport {Route } from 'react-router-dom';\n\n\nexport default function Messenger(props) {\n \n  const [state, setState] = useState({\n    receiverId: 0,\n    receiverName: ''\n  })\n\n  // useEffect(() => {\n  //   loadMessages();\n  // },[state]);\n\n  let updateUserId = (data) =>{\n    setState({\n      receiverId: data.Id,\n      receiverName: data.name\n    });\n  }\n\n\n  //Temporary timer for message loading\n  // const interval = setInterval(function() {\n  //   loadMessages();\n  // }, 10000);\n\n  let messagesEnd;\n  const scrollToBottom = () => {\n    messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n  const onMessageUpdate = () => {\n    \n    scrollToBottom()\n  }\n    return (\n      <div className={styles.messenger}>\n        {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n        {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n        \n        <div className={[styles.scrollable,styles.sidebar].join(' ')}>\n          <ConversationList onConversationSelect={updateUserId}/>\n        </div>\n        \n        <div id='scrollContainer' className={[styles.scrollable, styles.content].join(' ')}>\n          <Route path=\"/InboxPage\" render={(props) =>{\n            if (!props.location.state || !('from' in props.location.state)){\n              props.location.state = state\n            };\n            return(\n              <MessageList \n              name={props.location.state.receiverName} \n              receiver={props.location.state.receiverId} \n              onMessagesUpdate={onMessageUpdate} /> \n            )\n          }}/>\n          <div style={{ float:\"left\", clear: \"both\" }}\n              ref={(el) => { messagesEnd = el; }}>\n          </div>\n{/* <Route\n      exact\n      path=\"/InboxPage\"\n      component={MessageList}\n /> */}\n          \n          {/* <MessageList name={state.receiverName} receiver={state.receiverId} routedID={state.routedId}/> */}\n        </div>\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}