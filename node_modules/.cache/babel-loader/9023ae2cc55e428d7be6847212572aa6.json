{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/ProfileView/done.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport JobPosting from '../ContractorActiveJobsPage/jobpostingCompleted';\nimport api from '../api/api';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)'\n  }\n}));\n\nconst Done = props => {\n  _s();\n\n  const classes = useStyles();\n  const [cCompletedJobs, setCCompletedJobs] = useState([]);\n  let contractorId = {};\n  contractorId[\"id\"] = props.id;\n\n  const getCCompletedJobs = () => {\n    api.getCCompletedJobsByClients(contractorId).then(res => {\n      console.log(\"Job loaded successfully\");\n      console.log(res);\n      setCCompletedJobs(res.data[\"completedJobs\"]); //change [] with .get\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getCCompletedJobs();\n  }, []);\n\n  const renderCompletedJobs = () => {\n    let i = 0;\n    let completedJobCount = cCompletedJobs.length;\n    let tempJobs = [];\n\n    while (i < completedJobCount && i < 5) {\n      let completedJob = cCompletedJobs[i];\n      let jobTitle = completedJob.title;\n      let jobId = completedJob.id;\n      let contractorName = completedJob.clientFirstName;\n      let location = completedJob.locationDetail;\n      var serviceTypeList = completedJob.serviceTypeList; // var serviceTypeList = str.split(',');\n\n      let avatar = completedJob.downloadurl[0];\n      let userId = completedJob.clientId;\n      tempJobs.push( /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(JobPosting, {\n        userId: userId,\n        avatar: avatar,\n        complete: 1,\n        id: jobId,\n        title: jobTitle,\n        name: contractorName,\n        location: location,\n        serviceList: serviceTypeList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }\n      })));\n      i += 1;\n    }\n\n    return tempJobs;\n  };\n\n  if (cCompletedJobs.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"It seems like this contractor doesn't have any completed jobs.\"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      cellHeight: 300,\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, renderCompletedJobs()));\n  } // return(\n  //     <div className={classes.root}>\n  //       <GridList cellHeight={300} cols={2.5} className={classes.gridList}>\n  //           {renderCompletedJobs()}\n  //       </GridList>\n  //     </div>\n  // )\n\n};\n\n_s(Done, \"sq382SITvEmBG8ViZ5o8Sfeb0ao=\", false, function () {\n  return [useStyles];\n});\n\n_c = Done;\nexport default Done;\nexport { Done };\n\nvar _c;\n\n$RefreshReg$(_c, \"Done\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/ProfileView/done.js"],"names":["React","useEffect","useState","JobPosting","api","Grid","makeStyles","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","Done","props","classes","cCompletedJobs","setCCompletedJobs","contractorId","id","getCCompletedJobs","getCCompletedJobsByClients","then","res","console","log","data","catch","err","renderCompletedJobs","i","completedJobCount","length","tempJobs","completedJob","jobTitle","title","jobId","contractorName","clientFirstName","location","locationDetail","serviceTypeList","avatar","downloadurl","userId","clientId","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport JobPosting from '../ContractorActiveJobsPage/jobpostingCompleted';\nimport api from '../api/api';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)',\n  },\n}));\nconst Done = (props) => {\n  const classes = useStyles();\n    const [cCompletedJobs, setCCompletedJobs] = useState([]);\n    let contractorId= {}\n    contractorId[\"id\"] =props.id\n    const getCCompletedJobs = () => {\n        api.getCCompletedJobsByClients(contractorId).then(res => {\n            console.log(\"Job loaded successfully\");\n            console.log(res);\n            setCCompletedJobs(res.data[\"completedJobs\"]); //change [] with .get\n        }).catch(err => console.log(err))\n    }\n\n    useEffect(() => {\n        getCCompletedJobs();\n      },[]);\n    const renderCompletedJobs = () => {\n        let i = 0;\n        let completedJobCount = cCompletedJobs.length;\n        let tempJobs = [];\n        while (i < completedJobCount && i<5) {\n          let completedJob = cCompletedJobs[i]\n          let jobTitle = completedJob.title\n          let jobId = completedJob.id\n          let contractorName = completedJob.clientFirstName\n          let location = completedJob.locationDetail\n          var serviceTypeList = completedJob.serviceTypeList;\n          // var serviceTypeList = str.split(',');\n          let avatar = completedJob.downloadurl[0]\n          let userId= completedJob.clientId\n          tempJobs.push(\n            <Grid item>\n              <JobPosting userId={userId} avatar={avatar} complete= {1} id={jobId} title={jobTitle} name={contractorName} location={location} serviceList={serviceTypeList}/>\n            </Grid>\n          );\n          i += 1;\n        }\n        return tempJobs;}\n\n      if (cCompletedJobs.length===0){\n        return(\n          <div>\n            <p>It seems like this contractor doesn't have any completed jobs.</p>\n          </div>\n        )\n      }\n      else{\n        return(\n            <div className={classes.root}>\n              <Grid cellHeight={300} container direction=\"row\" justify=\"center\" alignItems=\"center\">\n                  {renderCompletedJobs()}\n              </Grid>\n            </div>\n        )\n            }\n    // return(\n    //     <div className={classes.root}>\n    //       <GridList cellHeight={300} cols={2.5} className={classes.gridList}>\n    //           {renderCompletedJobs()}\n    //       </GridList>\n    //     </div>\n    // )\n\n};\n\nexport default Done;\nexport {Done};"]},"metadata":{},"sourceType":"module"}