{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/HomeOwnerActiveJobsPage/saved.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport api from '../api/api';\nimport JobPosting from './jobpostingUnassigned';\nimport styles from './styles.module.css';\nimport { Grid } from '@material-ui/core';\nimport LoadingView from '../ResuableComponents/loadingView';\n\nconst Unassigned = () => {\n  _s();\n\n  let userId = [];\n  const [unassignedJobs, setAllUnassignedJobs] = useState({\n    downloadurl: []\n  });\n  const [loading, setLoading] = useState(false);\n\n  const getAllUnassignedJobs = () => {\n    api.getAllUnassignedJobs(userId).then(res => {\n      console.log(\"Job loaded successfully\");\n      console.log(res);\n      setAllUnassignedJobs(res.data);\n      setLoading(false);\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getAllUnassignedJobs();\n  }, []);\n\n  const renderUnassignedJobs = () => {\n    let i = 0;\n    let unassignedJobCount = unassignedJobs.length;\n\n    if (unassignedJobCount === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }\n      }, \"It seems you don't have any Unassigned Jobs.\"));\n    } else {\n      let tempJobs = [];\n\n      while (i < unassignedJobCount) {\n        let unassignedJob = unassignedJobs[i];\n        let jobTitle = unassignedJob.title;\n        let jobId = unassignedJob.id;\n        let contractorName = unassignedJob.clientFirstName;\n        let location = unassignedJob.locationDetail;\n        var serviceTypeList = unassignedJob.serviceTypeList;\n        let avatar = unassignedJob.downloadurl[0]; // let userId = unassignedJob.contractorId\n\n        tempJobs.push( /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(JobPosting, {\n          userId: userId,\n          avatar: avatar,\n          complete: 5,\n          id: jobId,\n          title: jobTitle,\n          name: contractorName,\n          location: location,\n          serviceList: serviceTypeList,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }\n        })));\n        i += 1;\n      }\n\n      return tempJobs;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, loading ? /*#__PURE__*/React.createElement(LoadingView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 26\n    }\n  }) : renderUnassignedJobs()));\n};\n\n_s(Unassigned, \"vNDjNHdK0aHqE9+jqdhg+VS0Xqw=\");\n\n_c = Unassigned;\nexport default Unassigned;\nexport { Unassigned };\n\nvar _c;\n\n$RefreshReg$(_c, \"Unassigned\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/HomeOwnerActiveJobsPage/saved.js"],"names":["React","useEffect","useState","api","JobPosting","styles","Grid","LoadingView","Unassigned","userId","unassignedJobs","setAllUnassignedJobs","downloadurl","loading","setLoading","getAllUnassignedJobs","then","res","console","log","data","catch","err","renderUnassignedJobs","i","unassignedJobCount","length","tempJobs","unassignedJob","jobTitle","title","jobId","id","contractorName","clientFirstName","location","locationDetail","serviceTypeList","avatar","push","gridContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport api from '../api/api';\nimport JobPosting from './jobpostingUnassigned';\nimport styles from './styles.module.css'; \nimport { Grid } from '@material-ui/core';\nimport LoadingView from '../ResuableComponents/loadingView';\n\nconst Unassigned = () => {\n    let userId=[]\n    const [unassignedJobs, setAllUnassignedJobs] = useState({downloadurl:[]});\n    const [loading, setLoading] = useState(false);\n\n    const getAllUnassignedJobs = () => {\n        api.getAllUnassignedJobs(userId).then(res => {\n            console.log(\"Job loaded successfully\");\n            console.log(res)\n            setAllUnassignedJobs(res.data);\n            setLoading(false);\n        }).catch(err => console.log(err))\n    }\n\n    useEffect(() => {\n        setLoading(true);\n        getAllUnassignedJobs();\n    },[]);\n    const renderUnassignedJobs = () => {\n        let i = 0;\n        let unassignedJobCount = unassignedJobs.length;\n        if (unassignedJobCount===0){\n            return(\n              <div>\n                <p>It seems you don't have any Unassigned Jobs.</p>\n              </div>\n            )\n          }\n          else{\n        let tempJobs = [];\n        while (i < unassignedJobCount) {\n            let unassignedJob = unassignedJobs[i]\n            let jobTitle = unassignedJob.title\n            let jobId = unassignedJob.id\n            let contractorName = unassignedJob.clientFirstName\n            let location = unassignedJob.locationDetail\n            var serviceTypeList = unassignedJob.serviceTypeList\n            let avatar = unassignedJob.downloadurl[0]\n            // let userId = unassignedJob.contractorId\n\n            tempJobs.push(\n                <Grid item>\n                    <JobPosting userId={userId} avatar={avatar} complete= {5} id={jobId} title={jobTitle} name={contractorName} location={location} serviceList={serviceTypeList}/>\n                </Grid>\n            );\n\n            i += 1;\n        }\n        return tempJobs;}\n    };\n    return(\n        <div className={styles.gridContainer}>\n            <Grid container spacing={2} justify=\"left\">\n                {loading?<LoadingView/>:renderUnassignedJobs()}\n            </Grid>\n        </div>\n    )\n};\n\nexport default Unassigned;\nexport {Unassigned};"]},"metadata":{},"sourceType":"module"}