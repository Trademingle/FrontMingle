{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/MyProfile/passwordForm.js\";\nimport React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport { object, ref, string } from 'yup';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport styles from './profile.module.css'; // import Spinner from './Spinner';\n// import Alert from './Alert';\n\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\nimport swal from 'sweetalert';\nimport Firebase from '../Firebase/firebase';\nexport default class FormPasswordReset extends Component {\n  constructor(_props) {\n    super(_props);\n    this.state = {\n      passChangeSuccess: false,\n      data: {}\n    };\n\n    this._handleModalClose = () => {\n      this.setState(() => ({\n        passChangeSuccess: false\n      }));\n    };\n\n    this._handleSubmit = ({\n      currentPass,\n      newPass,\n      confirmPass,\n      setSubmitting,\n      resetForm\n    }) => {\n      let data = {};\n      data.oldpassword = currentPass;\n      data.password = newPass;\n      var user = Firebase.auth.currentUser;\n      var credential = Firebase.emailProvider.credential(user.email, currentPass);\n      const props = this.props; // Prompt the user to re-provide their sign-in credentials\n\n      user.reauthenticateWithCredential(credential).then(function () {\n        // User re-authenticated.\n        Firebase.auth.currentUser.updatePassword(newPass).then(function () {\n          // Update successful.\n          swal({\n            title: \"Updated!\",\n            text: \"Password has been successfully updated!\",\n            icon: \"success\",\n            button: \"OK\"\n          });\n          props.close();\n        }).catch(function (error) {\n          console.log(\"Error has happened while updating password\");\n          swal({\n            title: \"Password Error!\",\n            text: error.message,\n            icon: \"error\",\n            button: \"Try Again\"\n          }); // An error happened.\n        });\n      }).catch(function (error) {\n        console.log(\"Error has happened while reauthenticating\");\n        swal({\n          title: \"Current Password Incorrect!\",\n          text: \"Password error! That is not the right password you have right now!\",\n          icon: \"error\",\n          button: \"Try Again\"\n        }); // An error happened.\n      }); // Firebase.auth.currentUser.reauthenticateAndRetrieveDataWithCredential(\n      //   firebase.auth.EmailAuthProvider.credential(\n      //     firebase.auth().currentUser.email, \n      //     providedPassword\n      //   )\n      // );\n      // api.changePassword(data).then(res => {\n      //   console.log(res);\n      //   swal({\n      //     title: \"Updated!\",\n      //     text: \"Password has been successfully updated!\",\n      //     icon: \"success\",\n      //     button: \"OK\",\n      //   });\n      //   this.props.close()\n      // }).catch(err => console.log(err))\n    };\n\n    console.log(this.props);\n    this._handleSubmit = this._handleSubmit.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        currentPass: '',\n        newPass: '',\n        confirmPass: ''\n      },\n      validationSchema: object().shape({\n        currentPass: string().required('Current password is required'),\n        newPass: string().required('New password is required'),\n        confirmPass: string().oneOf([ref('newPass')], 'Passwords do not match').required('Password is required')\n      }),\n      onSubmit: ({\n        currentPass,\n        newPass,\n        confirmPass\n      }, {\n        setSubmitting,\n        resetForm\n      }) => this._handleSubmit({\n        currentPass,\n        newPass,\n        confirmPass,\n        setSubmitting,\n        resetForm\n      }),\n      render: props => {\n        const {\n          values,\n          touched,\n          errors,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isValid,\n          isSubmitting\n        } = props;\n        return /*#__PURE__*/React.createElement(Paper, {\n          className: styles.passwordForm2,\n          elevation: 10,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"form\", {\n          className: styles.passwordForm,\n          onSubmit: handleSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(CloseOutlinedIcon, {\n          style: {\n            height: 40,\n            width: 40\n          },\n          className: styles.cross,\n          onClick: this.props.close,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }\n        }, \"Change password!\"), /*#__PURE__*/React.createElement(FormControl, {\n          fullWidth: true,\n          margin: \"dense\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(InputLabel, {\n          htmlFor: \"password-current\",\n          error: Boolean(touched.currentPass && errors.currentPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 19\n          }\n        }, 'Current Password'), /*#__PURE__*/React.createElement(Input, {\n          id: \"password-current\",\n          name: \"currentPass\",\n          type: \"password\",\n          value: values.currentPass,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          error: Boolean(touched.currentPass && errors.currentPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(FormHelperText, {\n          error: Boolean(touched.currentPass && errors.currentPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 19\n          }\n        }, touched.currentPass && errors.currentPass ? errors.currentPass : '')), /*#__PURE__*/React.createElement(FormControl, {\n          fullWidth: true,\n          margin: \"dense\",\n          error: Boolean(touched.newPass && errors.newPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(InputLabel, {\n          htmlFor: \"password-new\",\n          error: Boolean(touched.newPass && errors.newPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 19\n          }\n        }, 'New Password'), /*#__PURE__*/React.createElement(Input, {\n          id: \"password-new\",\n          name: \"newPass\",\n          type: \"password\",\n          value: values.newPass,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          error: Boolean(touched.newPass && errors.newPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(FormHelperText, {\n          error: Boolean(touched.newPass && errors.newPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 19\n          }\n        }, touched.newPass && errors.newPass ? errors.newPass : '')), /*#__PURE__*/React.createElement(FormControl, {\n          fullWidth: true,\n          margin: \"dense\",\n          error: Boolean(touched.confirmPass && errors.confirmPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(InputLabel, {\n          htmlFor: \"password-confirm\",\n          error: Boolean(touched.confirmPass && errors.confirmPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 19\n          }\n        }, 'Confirm Password'), /*#__PURE__*/React.createElement(Input, {\n          id: \"password-confirm\",\n          name: \"confirmPass\",\n          type: \"password\",\n          value: values.confirmPass,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          error: Boolean(touched.confirmPass && errors.confirmPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(FormHelperText, {\n          error: Boolean(touched.confirmPass && errors.confirmPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 19\n          }\n        }, touched.confirmPass && errors.confirmPass ? errors.confirmPass : '')), /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\",\n          variant: \"outlined\",\n          color: \"primary\",\n          disabled: Boolean(!isValid || isSubmitting),\n          style: {\n            margin: '16px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 17\n          }\n        }, 'Reset Password')));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/MyProfile/passwordForm.js"],"names":["React","Component","Formik","object","ref","string","Input","InputLabel","FormControl","FormHelperText","Button","Paper","styles","CloseOutlinedIcon","swal","Firebase","FormPasswordReset","constructor","props","state","passChangeSuccess","data","_handleModalClose","setState","_handleSubmit","currentPass","newPass","confirmPass","setSubmitting","resetForm","oldpassword","password","user","auth","currentUser","credential","emailProvider","email","reauthenticateWithCredential","then","updatePassword","title","text","icon","button","close","catch","error","console","log","message","bind","render","shape","required","oneOf","values","touched","errors","handleChange","handleBlur","handleSubmit","isValid","isSubmitting","passwordForm2","passwordForm","height","width","cross","Boolean","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport { object, ref, string } from 'yup';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport styles from './profile.module.css';\n// import Spinner from './Spinner';\n// import Alert from './Alert';\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\nimport swal from 'sweetalert';\nimport Firebase from '../Firebase/firebase';\n\nexport default class FormPasswordReset extends Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n\n    this._handleSubmit = this._handleSubmit.bind(this)\n  }\n  state = {\n    passChangeSuccess: false,\n    data:{}\n  }\n  _handleModalClose = () => {\n    this.setState(() => ({\n      passChangeSuccess: false,\n    }))\n  }\n  // _renderModal = () => {\n  //   const onClick = () => {\n  //     this.setState(() => ({ passChangeSuccess: false }))\n  //   }\n  //   return (\n  //     <Alert\n  //       isOpen={this.state.passChangeSuccess}\n  //       onClose={this.props.close}\n  //       handleSubmit={onClick}\n  //       title=\"Password Reset\"\n  //       text=\"Your password was changed successfully\"\n  //       submitButtonText=\"Done\"\n  //     />\n  //   )\n  // }\n  _handleSubmit = ({\n    currentPass,\n    newPass,\n    confirmPass,\n    setSubmitting,\n    resetForm,\n  }) => {\n    let data={}\n    data.oldpassword=currentPass;\n    data.password= newPass;\n    var user = Firebase.auth.currentUser;\n    var credential = Firebase.emailProvider.credential(\n      user.email,\n      currentPass\n    );\n\n    const props = this.props;\n    // Prompt the user to re-provide their sign-in credentials\n    user.reauthenticateWithCredential(credential).then(function() {\n      // User re-authenticated.\n      Firebase.auth.currentUser.updatePassword(newPass).then(function() {\n        // Update successful.\n        swal({\n          title: \"Updated!\",\n          text: \"Password has been successfully updated!\",\n          icon: \"success\",\n          button: \"OK\",\n        });\n        props.close()\n      }).catch(function(error) {\n        console.log(\"Error has happened while updating password\");\n        swal({\n          title: \"Password Error!\",\n          text: error.message,\n          icon: \"error\",\n          button: \"Try Again\",\n        });\n        // An error happened.\n      });\n    }).catch(function(error) {\n      console.log(\"Error has happened while reauthenticating\");\n      swal({\n        title: \"Current Password Incorrect!\",\n        text: \"Password error! That is not the right password you have right now!\",\n        icon: \"error\",\n        button: \"Try Again\",\n      });\n      // An error happened.\n    });\n\n    // Firebase.auth.currentUser.reauthenticateAndRetrieveDataWithCredential(\n    //   firebase.auth.EmailAuthProvider.credential(\n    //     firebase.auth().currentUser.email, \n    //     providedPassword\n    //   )\n    // );\n   \n    // api.changePassword(data).then(res => {\n    //   console.log(res);\n    //   swal({\n    //     title: \"Updated!\",\n    //     text: \"Password has been successfully updated!\",\n    //     icon: \"success\",\n    //     button: \"OK\",\n    //   });\n    //   this.props.close()\n    // }).catch(err => console.log(err))\n  }\n  render() {\n    return (\n      <Formik\n        initialValues={{\n          currentPass: '',\n          newPass: '',\n          confirmPass: '',\n        }}\n        validationSchema={object().shape({\n          currentPass: string().required('Current password is required'),\n          newPass: string().required('New password is required'),\n          confirmPass: string()\n            .oneOf([ref('newPass')], 'Passwords do not match')\n            .required('Password is required'),\n        })}\n        onSubmit={(\n          { currentPass, newPass, confirmPass },\n          { setSubmitting, resetForm }\n        ) =>\n          this._handleSubmit({\n            currentPass,\n            newPass,\n            confirmPass,\n            setSubmitting,\n            resetForm,\n          })\n        }\n        render={props => {\n          const {\n            values,\n            touched,\n            errors,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isValid,\n            isSubmitting,\n          } = props\n          return (\n            <Paper className={styles.passwordForm2} elevation={10}>\n              <form className={styles.passwordForm} onSubmit={handleSubmit}>\n                <CloseOutlinedIcon style={{ height: 40, width: 40 }} className={styles.cross} onClick={this.props.close}/>\n                <h3>Change password!</h3>\n                <FormControl fullWidth margin=\"dense\">\n                  <InputLabel\n                    htmlFor=\"password-current\"\n                    error={Boolean(touched.currentPass && errors.currentPass)}\n                  >\n                    {'Current Password'}\n                  </InputLabel>\n                  <Input\n                    id=\"password-current\"\n                    name=\"currentPass\"\n                    type=\"password\"\n                    value={values.currentPass}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={Boolean(touched.currentPass && errors.currentPass)}\n                  />\n                  <FormHelperText\n                    error={Boolean(touched.currentPass && errors.currentPass)}\n                  >\n                    {touched.currentPass && errors.currentPass\n                      ? errors.currentPass\n                      : ''}\n                  </FormHelperText>\n                </FormControl>\n                <FormControl\n                  fullWidth\n                  margin=\"dense\"\n                  error={Boolean(touched.newPass && errors.newPass)}\n                >\n                  <InputLabel\n                    htmlFor=\"password-new\"\n                    error={Boolean(touched.newPass && errors.newPass)}\n                  >\n                    {'New Password'}\n                  </InputLabel>\n                  <Input\n                    id=\"password-new\"\n                    name=\"newPass\"\n                    type=\"password\"\n                    value={values.newPass}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={Boolean(touched.newPass && errors.newPass)}\n                  />\n                  <FormHelperText\n                    error={Boolean(touched.newPass && errors.newPass)}\n                  >\n                    {touched.newPass && errors.newPass ? errors.newPass : ''}\n                  </FormHelperText>\n                </FormControl>\n                <FormControl\n                  fullWidth\n                  margin=\"dense\"\n                  error={Boolean(touched.confirmPass && errors.confirmPass)}\n                >\n                  <InputLabel\n                    htmlFor=\"password-confirm\"\n                    error={Boolean(touched.confirmPass && errors.confirmPass)}\n                  >\n                    {'Confirm Password'}\n                  </InputLabel>\n                  <Input\n                    id=\"password-confirm\"\n                    name=\"confirmPass\"\n                    type=\"password\"\n                    value={values.confirmPass}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={Boolean(touched.confirmPass && errors.confirmPass)}\n                  />\n                  <FormHelperText\n                    error={Boolean(touched.confirmPass && errors.confirmPass)}\n                  >\n                    {touched.confirmPass && errors.confirmPass\n                      ? errors.confirmPass\n                      : ''}\n                  </FormHelperText>\n                </FormControl>\n                <Button\n                  type=\"submit\"\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  disabled={Boolean(!isValid || isSubmitting)}\n                  style={{ margin: '16px' }}\n                >\n                  {'Reset Password'}\n                </Button>\n              </form>\n              {/* {this._renderModal()} */}\n            </Paper>\n          )\n        }}\n      />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}