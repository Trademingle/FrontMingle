{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/ContractorActiveJobsPage/saved.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport JobPosting from './jobpostingSaved.js';\nimport api from '../api/api';\nimport { Grid } from '@material-ui/core';\nimport LoadingView from '../ResuableComponents/loadingView';\n\nconst Saved = () => {\n  _s();\n\n  let data = {};\n  const [savedJobs, setSavedJobs] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getSavedJobs = () => {\n    api.getSavedJobs().then(res => {\n      // debugger;\n      console.log(\"Job loaded successfully\");\n      console.log(res);\n      setSavedJobs(res.data); //change [] with .get\n\n      setLoading(false);\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getSavedJobs();\n  }, []);\n\n  const renderSavedJobs = () => {\n    let i = 0;\n    let savedJobsCount = savedJobs.length;\n\n    if (savedJobsCount === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }\n      }, \"It seems you don't have any Saved Jobs.\"));\n    } else {\n      let tempJobs = [];\n\n      while (i < savedJobsCount) {\n        let unassignedJob = savedJobs[i];\n        let jobId = unassignedJob.id;\n        let jobTitle = unassignedJob.title;\n        let contractorName = unassignedJob.clientFirstName;\n        let location = unassignedJob.locationDetail;\n        let str = unassignedJob.serviceTypeList;\n        let avatar = unassignedJob.downloadurl[0];\n        let userId = unassignedJob.clientId; //   let avatar = unassignedJob.imageListStoreRef\n        // debugger\n\n        tempJobs.push( /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(JobPosting, {\n          userId: userId,\n          avatar: avatar,\n          complete: 0,\n          id: jobId,\n          title: jobTitle,\n          name: contractorName,\n          location: location,\n          serviceList: str,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }\n        }))); // Proceed to the next message.\n\n        i += 1;\n      }\n\n      return tempJobs;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(LoadingView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 22\n    }\n  }) : renderSavedJobs()));\n};\n\n_s(Saved, \"WkOtUzCddAKpJtZ6nIwjhUJOKXs=\");\n\n_c = Saved;\nexport default Saved;\nexport { Saved };\n\nvar _c;\n\n$RefreshReg$(_c, \"Saved\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/ContractorActiveJobsPage/saved.js"],"names":["React","useEffect","useState","styles","JobPosting","api","Grid","LoadingView","Saved","data","savedJobs","setSavedJobs","loading","setLoading","getSavedJobs","then","res","console","log","catch","err","renderSavedJobs","i","savedJobsCount","length","tempJobs","unassignedJob","jobId","id","jobTitle","title","contractorName","clientFirstName","location","locationDetail","str","serviceTypeList","avatar","downloadurl","userId","clientId","push","gridContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';  \nimport JobPosting from './jobpostingSaved.js';\nimport api from '../api/api';\nimport { Grid } from '@material-ui/core';\nimport LoadingView from '../ResuableComponents/loadingView';\n\nconst Saved = () => {\n  let data={}\n    const [savedJobs, setSavedJobs] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const getSavedJobs = () => {\n        api.getSavedJobs().then(res => {\n          // debugger;\n            console.log(\"Job loaded successfully\");\n            console.log(res);\n            setSavedJobs(res.data); //change [] with .get\n            setLoading(false);\n        }).catch(err => console.log(err))\n    }\n  \n    useEffect(() => {\n      setLoading(true);\n      getSavedJobs();\n      },[]);\n  \n    const renderSavedJobs = () => {\n        let i = 0;\n        let savedJobsCount = savedJobs.length;\n        if (savedJobsCount===0){\n          return(\n            <div>\n              <p>It seems you don't have any Saved Jobs.</p>\n            </div>\n          )\n        }\n        else{\n        let tempJobs = [];\n        while (i < savedJobsCount) {\n          let unassignedJob = savedJobs[i]\n          let jobId = unassignedJob.id\n          let jobTitle = unassignedJob.title\n          let contractorName = unassignedJob.clientFirstName\n          let location = unassignedJob.locationDetail\n          let str = unassignedJob.serviceTypeList;\n          let avatar = unassignedJob.downloadurl[0]\n          let userId = unassignedJob.clientId\n        //   let avatar = unassignedJob.imageListStoreRef\n          // debugger\n  \n          tempJobs.push(\n            <Grid item>\n              <JobPosting userId={userId} avatar={avatar} complete= {0} id={jobId} title={jobTitle} name={contractorName} location={location} serviceList={str}/>\n            </Grid>\n          );\n    \n          // Proceed to the next message.\n          i += 1;\n        }\n        return tempJobs;}\n      };\n    return(\n      <div className={styles.gridContainer}>\n        <Grid container spacing={2} justify=\"left\">\n            {loading?<LoadingView/>:renderSavedJobs()}\n        </Grid>\n      </div>)\n};\n\nexport default Saved;\nexport {Saved};"]},"metadata":{},"sourceType":"module"}