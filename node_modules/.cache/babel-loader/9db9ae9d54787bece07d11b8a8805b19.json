{"ast":null,"code":"import _slicedToArray from\"/Users/nandupokhrel/Desktop/BookTrades/trademingle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import ConversationListItem from'../ConversationListItem';import api from'../../../api/api';import{Link}from'react-router-dom';import SearchIcon from'@material-ui/icons/Search';import styles from'./conversationList.module.css';import LoadingView from'../../../ResuableComponents/loadingView';export default function ConversationList(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),conversations=_useState2[0],setConversations=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),search=_useState4[0],setSearch=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),filteredConversations=_useState6[0],setfilteredConversations=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),loading=_useState8[0],setLoading=_useState8[1];var getConversations=function getConversations(props){// axios.get('https://randomuser.me/api/?results=20').then(response => {\n//     let newConversations = response.data.results.map(result => {\n//       return {\n//         photo: result.picture.large,\n//         name: result.name.first/*`${result.name.first} ${result.name.last}`*/,\n//         text: 'Preview Message...'\n//       };\n//     });\n//     console.log(newConversations);\n//     setConversations(newConversations.slice(0,6));\n// });\napi.getChats().then(function(res){console.log(\"Chats loaded successfully\");console.log(res);setConversations(res.data);setLoading(false);}).catch(function(err){return console.log(err);});};// let changeConversations = (data) => {\n//   // props.onConversationSelect(data);\n// };\nuseEffect(function(){setLoading(true);getConversations();},[]);useEffect(function(){setfilteredConversations(conversations.filter(function(conversation){return(conversation.firstName+' '+conversation.lastName).toLowerCase().includes(search.toLowerCase());}));},[search,conversations]);if(loading){return/*#__PURE__*/React.createElement(LoadingView,null);}return/*#__PURE__*/React.createElement(\"div\",{className:styles.conversation_list},/*#__PURE__*/React.createElement(\"h1\",{className:styles.inbox},\"Inbox\"),/*#__PURE__*/React.createElement(\"div\",{className:styles.conversation_search},/*#__PURE__*/React.createElement(SearchIcon,{className:styles.search_icon}),/*#__PURE__*/React.createElement(\"input\",{type:\"search\",className:styles.conversation_search_input,placeholder:\"Search\",onChange:function onChange(e){return setSearch(e.target.value);}})),filteredConversations.map(function(conversation){return/*#__PURE__*/React.createElement(Link,{style:{textDecoration:'none'},to:{pathname:'/InboxPage',state:{receiverName:conversation.firstName,receiverId:conversation.id,from:'Inbox'}}},/*#__PURE__*/React.createElement(ConversationListItem,{key:conversation.name,data:conversation}));}));}","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/Inbox/components/ConversationList/index.js"],"names":["React","useState","useEffect","ConversationListItem","api","Link","SearchIcon","styles","LoadingView","ConversationList","props","conversations","setConversations","search","setSearch","filteredConversations","setfilteredConversations","loading","setLoading","getConversations","getChats","then","res","console","log","data","catch","err","filter","conversation","firstName","lastName","toLowerCase","includes","conversation_list","inbox","conversation_search","search_icon","conversation_search_input","e","target","value","map","textDecoration","pathname","state","receiverName","receiverId","id","from","name"],"mappings":"yKAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CACA,MAAOC,CAAAA,oBAAP,KAAiC,yBAAjC,CACA,MAAOC,CAAAA,GAAP,KAAgB,kBAAhB,CACA,OAAQC,IAAR,KAAmB,kBAAnB,CACA,MAAOC,CAAAA,UAAP,KAAuB,2BAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,+BAAnB,CACA,MAAOC,CAAAA,WAAP,KAAwB,yCAAxB,CAEA,cAAe,SAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAAiC,CAC9C,cAA0CT,QAAQ,CAAC,EAAD,CAAlD,wCAAOU,aAAP,eAAsBC,gBAAtB,eACA,eAA4BX,QAAQ,CAAC,EAAD,CAApC,yCAAOY,MAAP,eAAeC,SAAf,eACA,eAA0Db,QAAQ,CAAC,EAAD,CAAlE,yCAAOc,qBAAP,eAA8BC,wBAA9B,eACA,eAA8Bf,QAAQ,CAAC,KAAD,CAAtC,yCAAOgB,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACT,KAAD,CAAW,CAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAN,GAAG,CAACgB,QAAJ,GAAeC,IAAf,CAAoB,SAAAC,GAAG,CAAI,CACzBC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EACAD,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACAV,gBAAgB,CAACU,GAAG,CAACG,IAAL,CAAhB,CACAP,UAAU,CAAC,KAAD,CAAV,CACD,CALD,EAKGQ,KALH,CAKS,SAAAC,GAAG,QAAIJ,CAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ,CAAJ,EALZ,EAMD,CAnBD,CAqBA;AACA;AACA;AACAzB,SAAS,CAAC,UAAM,CACdgB,UAAU,CAAC,IAAD,CAAV,CACAC,gBAAgB,GACjB,CAHQ,CAGP,EAHO,CAAT,CAKAjB,SAAS,CAAC,UAAM,CACdc,wBAAwB,CACtBL,aAAa,CAACiB,MAAd,CAAqB,SAACC,YAAD,QACrB,CAACA,YAAY,CAACC,SAAb,CAAyB,GAAzB,CAA+BD,YAAY,CAACE,QAA7C,EAAuDC,WAAvD,GAAqEC,QAArE,CAA8EpB,MAAM,CAACmB,WAAP,EAA9E,CADqB,EAArB,CADsB,CAAxB,CAKD,CANQ,CAMN,CAACnB,MAAD,CAASF,aAAT,CANM,CAAT,CAQA,GAAIM,OAAJ,CAAa,CACX,mBAAO,oBAAC,WAAD,MAAP,CACD,CAED,mBACE,2BAAK,SAAS,CAAEV,MAAM,CAAC2B,iBAAvB,eACE,0BAAI,SAAS,CAAE3B,MAAM,CAAC4B,KAAtB,UADF,cAEE,2BAAK,SAAS,CAAE5B,MAAM,CAAC6B,mBAAvB,eACE,oBAAC,UAAD,EAAY,SAAS,CAAE7B,MAAM,CAAC8B,WAA9B,EADF,cAEE,6BACE,IAAI,CAAC,QADP,CAEE,SAAS,CAAE9B,MAAM,CAAC+B,yBAFpB,CAGE,WAAW,CAAC,QAHd,CAIE,QAAQ,CAAE,kBAACC,CAAD,QAAOzB,CAAAA,SAAS,CAACyB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB,EAJZ,EAFF,CAFF,CAYI1B,qBAAqB,CAAC2B,GAAtB,CAA0B,SAAAb,YAAY,qBACpC,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEc,cAAc,CAAE,MAAlB,CAAb,CAAyC,EAAE,CAAE,CACzCC,QAAQ,CAAC,YADgC,CAEzCC,KAAK,CAAE,CAACC,YAAY,CAACjB,YAAY,CAACC,SAA3B,CAAsCiB,UAAU,CAAClB,YAAY,CAACmB,EAA9D,CAAkEC,IAAI,CAAE,OAAxE,CAFkC,CAA7C,eAIE,oBAAC,oBAAD,EACA,GAAG,CAAEpB,YAAY,CAACqB,IADlB,CAEA,IAAI,CAAErB,YAFN,EAJF,CADoC,EAAtC,CAZJ,CADF,CA4BD","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ConversationListItem from '../ConversationListItem';\nimport api from '../../../api/api';\nimport {Link} from 'react-router-dom';\nimport SearchIcon from '@material-ui/icons/Search'; \nimport styles from './conversationList.module.css';\nimport LoadingView from '../../../ResuableComponents/loadingView';\n\nexport default function ConversationList(props) {\n  const [conversations, setConversations] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [filteredConversations, setfilteredConversations] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getConversations = (props) => {\n    // axios.get('https://randomuser.me/api/?results=20').then(response => {\n    //     let newConversations = response.data.results.map(result => {\n    //       return {\n    //         photo: result.picture.large,\n    //         name: result.name.first/*`${result.name.first} ${result.name.last}`*/,\n    //         text: 'Preview Message...'\n    //       };\n    //     });\n    //     console.log(newConversations);\n    //     setConversations(newConversations.slice(0,6));\n    // });\n\n    api.getChats().then(res => {\n      console.log(\"Chats loaded successfully\");\n      console.log(res);\n      setConversations(res.data);\n      setLoading(false);\n    }).catch(err => console.log(err))\n  }\n\n  // let changeConversations = (data) => {\n  //   // props.onConversationSelect(data);\n  // };\n  useEffect(() => {\n    setLoading(true);\n    getConversations();\n  },[])\n\n  useEffect(() => {\n    setfilteredConversations(\n      conversations.filter((conversation) =>\n      (conversation.firstName + ' ' + conversation.lastName).toLowerCase().includes(search.toLowerCase())\n      )\n    );\n  }, [search, conversations]);\n\n  if (loading) {\n    return <LoadingView/>;\n  }\n\n  return (\n    <div className={styles.conversation_list}>\n      <h1 className={styles.inbox}>Inbox</h1>\n      <div className={styles.conversation_search}>\n        <SearchIcon className={styles.search_icon}/>\n        <input\n          type=\"search\"\n          className={styles.conversation_search_input}\n          placeholder=\"Search\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n    </div>\n      {\n        filteredConversations.map(conversation =>\n          <Link style={{ textDecoration: 'none' }} to={{\n              pathname:'/InboxPage',\n              state: {receiverName:conversation.firstName, receiverId:conversation.id, from: 'Inbox'}\n            }}>\n            <ConversationListItem\n            key={conversation.name}\n            data={conversation}/>\n            \n          </Link>\n          \n        )\n      }\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}