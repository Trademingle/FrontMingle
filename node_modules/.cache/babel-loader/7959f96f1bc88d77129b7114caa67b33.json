{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/Inbox/components/ConversationList/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ConversationListItem from '../ConversationListItem';\nimport api from '../../../api/api';\nimport { Link } from 'react-router-dom';\nimport SearchIcon from '@material-ui/icons/Search';\nimport styles from './conversationList.module.css';\nimport LoadingView from '../../../ResuableComponents/loadingView';\nexport default function ConversationList(props) {\n  _s();\n\n  const [conversations, setConversations] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [filteredConversations, setfilteredConversations] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getConversations = props => {\n    // axios.get('https://randomuser.me/api/?results=20').then(response => {\n    //     let newConversations = response.data.results.map(result => {\n    //       return {\n    //         photo: result.picture.large,\n    //         name: result.name.first/*`${result.name.first} ${result.name.last}`*/,\n    //         text: 'Preview Message...'\n    //       };\n    //     });\n    //     console.log(newConversations);\n    //     setConversations(newConversations.slice(0,6));\n    // });\n    api.getChats().then(res => {\n      console.log(\"Chats loaded successfully\");\n      console.log(res);\n      setConversations(res.data);\n      setLoading(false);\n    }).catch(err => console.log(err));\n  }; // let changeConversations = (data) => {\n  //   // props.onConversationSelect(data);\n  // };\n\n\n  useEffect(() => {\n    setLoading(true);\n    getConversations();\n  }, []);\n  useEffect(() => {\n    setfilteredConversations(conversations.filter(conversation => (conversation.firstName + ' ' + conversation.lastName).toLowerCase().includes(search.toLowerCase())));\n  }, [search, conversations]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(LoadingView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.conversation_list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: styles.inbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Inbox\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.conversation_search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    className: styles.search_icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"search\",\n    className: styles.conversation_search_input,\n    placeholder: \"Search\",\n    onChange: e => setSearch(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), filteredConversations.map(conversation => /*#__PURE__*/React.createElement(Link, {\n    style: {\n      textDecoration: 'none'\n    },\n    to: {\n      pathname: '/InboxPage',\n      state: {\n        receiverName: conversation.firstName,\n        receiverId: conversation.id,\n        from: 'Inbox'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ConversationListItem, {\n    key: conversation.name,\n    data: conversation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }))));\n}\n\n_s(ConversationList, \"yatlp7EKA7UizTmPXORAmVCqOUk=\");\n\n_c = ConversationList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationList\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/Inbox/components/ConversationList/index.js"],"names":["React","useState","useEffect","ConversationListItem","api","Link","SearchIcon","styles","LoadingView","ConversationList","props","conversations","setConversations","search","setSearch","filteredConversations","setfilteredConversations","loading","setLoading","getConversations","getChats","then","res","console","log","data","catch","err","filter","conversation","firstName","lastName","toLowerCase","includes","conversation_list","inbox","conversation_search","search_icon","conversation_search_input","e","target","value","map","textDecoration","pathname","state","receiverName","receiverId","id","from","name"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ConversationListItem from '../ConversationListItem';\nimport api from '../../../api/api';\nimport {Link} from 'react-router-dom';\nimport SearchIcon from '@material-ui/icons/Search'; \nimport styles from './conversationList.module.css';\nimport LoadingView from '../../../ResuableComponents/loadingView';\n\nexport default function ConversationList(props) {\n  const [conversations, setConversations] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [filteredConversations, setfilteredConversations] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getConversations = (props) => {\n    // axios.get('https://randomuser.me/api/?results=20').then(response => {\n    //     let newConversations = response.data.results.map(result => {\n    //       return {\n    //         photo: result.picture.large,\n    //         name: result.name.first/*`${result.name.first} ${result.name.last}`*/,\n    //         text: 'Preview Message...'\n    //       };\n    //     });\n    //     console.log(newConversations);\n    //     setConversations(newConversations.slice(0,6));\n    // });\n\n    api.getChats().then(res => {\n      console.log(\"Chats loaded successfully\");\n      console.log(res);\n      setConversations(res.data);\n      setLoading(false);\n    }).catch(err => console.log(err))\n  }\n\n  // let changeConversations = (data) => {\n  //   // props.onConversationSelect(data);\n  // };\n  useEffect(() => {\n    setLoading(true);\n    getConversations();\n  },[])\n\n  useEffect(() => {\n    setfilteredConversations(\n      conversations.filter((conversation) =>\n      (conversation.firstName + ' ' + conversation.lastName).toLowerCase().includes(search.toLowerCase())\n      )\n    );\n  }, [search, conversations]);\n\n  if (loading) {\n    return <LoadingView/>;\n  }\n\n  return (\n    <div className={styles.conversation_list}>\n      <h1 className={styles.inbox}>Inbox</h1>\n      <div className={styles.conversation_search}>\n        <SearchIcon className={styles.search_icon}/>\n        <input\n          type=\"search\"\n          className={styles.conversation_search_input}\n          placeholder=\"Search\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n    </div>\n      {\n        filteredConversations.map(conversation =>\n          <Link style={{ textDecoration: 'none' }} to={{\n              pathname:'/InboxPage',\n              state: {receiverName:conversation.firstName, receiverId:conversation.id, from: 'Inbox'}\n            }}>\n            <ConversationListItem\n            key={conversation.name}\n            data={conversation}/>\n            \n          </Link>\n          \n        )\n      }\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}