{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/Inbox/components/MessageList/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport Message from '../Message';\nimport moment from 'moment';\nimport InfoIcon from '@material-ui/icons/Info';\nimport api from '../../../api/api';\nimport styles from './messageList.module.css';\nimport DropDown from './dropDown';\nimport Send from '@material-ui/icons/SendSharp';\nexport default function MessageList(props) {\n  _s();\n\n  const MY_USER_ID = localStorage.getItem('user_id');\n  let [messages, setMessages] = useState([]);\n\n  const loadMessages = (receiver = props.receiver) => {\n    console.log(props.receiver);\n    api.getMessages(props.receiver).then(res => {\n      //Sample response: {\"from_sender\": \n      //                          [{\"sender\": \"sagar\", \"receiver\": \"prawesh\", \"message\": \"Message seen\", \"timestamp\": \"2020-09-27T02:03:58.310166Z\"}], \n      //                  \"to_sender\": \n      //                          [{\"sender\": \"prawesh\", \"receiver\": \"sagar\", \"message\": \"Hello, just test\", \"timestamp\": \"2020-09-27T02:03:47.940499Z\"}]}\n      const newMessages = [...res.data.from_sender, ...res.data.to_sender];\n      newMessages.sort(function (x, y) {\n        return new Date(x.timestamp) - new Date(y.timestamp);\n      });\n      messages.push(...newMessages);\n      setMessages(newMessages);\n      props.onMessagesUpdate();\n    }).catch(err => console.log(err));\n  }; // This is the polling function\n\n\n  let reloadMessages = (receiver = props.receiver) => {\n    api.getMessages(receiver).then(res => {\n      const newLen = res.data.from_sender.length + res.data.to_sender.length;\n\n      if (newLen > messages.length) {\n        const newMessages = [...res.data.from_sender, ...res.data.to_sender];\n        newMessages.sort(function (x, y) {\n          return new Date(x.timestamp) - new Date(y.timestamp);\n        });\n        messages.push(...newMessages.slice(-(newLen - messages.length)));\n        messages = [...messages];\n        setMessages(messages);\n        props.onMessagesUpdate();\n      }\n    }).catch(err => console.log(err));\n  };\n\n  let sendMessage = messageText => {\n    const message_data = {\n      receiver: props.receiver,\n      message: messageText\n    };\n    api.sendMessage(message_data).then(res => {\n      console.log('message was successfully sent!');\n      reloadMessages();\n    }).catch(err => console.log(err));\n  };\n\n  const renderMessages = () => {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.sender === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n\n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push( /*#__PURE__*/React.createElement(Message, {\n        key: i,\n        isMine: isMine,\n        startsSequence: startsSequence,\n        endsSequence: endsSequence,\n        showTimestamp: showTimestamp,\n        data: current,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      })); // Proceed to the next message.\n\n      i += 1;\n    }\n\n    return tempMessages;\n  };\n\n  const onMessageEvent = event => {\n    if (typeof event['data'] === 'string') {\n      console.log('data is not there');\n    } else {\n      reloadMessages(); // alert('MESSAGING HAS RECEIVED THE EVENT');\n    }\n  }; // debugger;\n\n\n  useEffect(() => {\n    messages = [];\n    setMessages(messages);\n    loadMessages();\n    window.addEventListener(\"message\", onMessageEvent, false); // debugger\n    // if (props.name == null){\n    //   props.name = 'sailesh@sharma.com'\n    // };\n\n    const reload = setInterval(() => {\n      reloadMessages();\n    }, 10000);\n    return () => {\n      clearInterval(reload);\n      window.removeEventListener(\"message\", onMessageEvent, false);\n    };\n  }, [props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.message_list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    className: styles.toolbar,\n    title: props.name,\n    rightItems: [/*#__PURE__*/React.createElement(DropDown, {\n      receiver: props.receiver,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Compose, {\n    onEnter: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), props.receiver === 0 && props.name === '' ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '40%',\n      textAlign: 'center',\n      margin: '10% auto 0 auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Send, {\n    style: {\n      color: \"#2B64D2\",\n      fontSize: 80,\n      transform: \"translateY(50%) rotate(-45deg)\",\n      marginBottom: '35px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, \"Please select a name from list to start chatting.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"If the list is empty, the only way to start a conversation is to visit user's profile and click on message button.\")) : /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.message_list_container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, renderMessages()));\n}\n\n_s(MessageList, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n\n_c = MessageList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/trademingle/src/components/Inbox/components/MessageList/index.js"],"names":["React","useEffect","useState","Compose","Toolbar","Message","moment","InfoIcon","api","styles","DropDown","Send","MessageList","props","MY_USER_ID","localStorage","getItem","messages","setMessages","loadMessages","receiver","console","log","getMessages","then","res","newMessages","data","from_sender","to_sender","sort","x","y","Date","timestamp","push","onMessagesUpdate","catch","err","reloadMessages","newLen","length","slice","sendMessage","messageText","message_data","message","renderMessages","i","messageCount","tempMessages","previous","current","next","isMine","sender","currentMoment","prevBySameAuthor","nextBySameAuthor","startsSequence","endsSequence","showTimestamp","previousMoment","previousDuration","duration","diff","author","as","nextMoment","nextDuration","onMessageEvent","event","window","addEventListener","reload","setInterval","clearInterval","removeEventListener","message_list","toolbar","name","width","textAlign","margin","color","fontSize","transform","marginBottom","message_list_container"],"mappings":"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","sourcesContent":["import React, {useEffect, useState } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport Message from '../Message';\nimport moment from 'moment';\nimport InfoIcon from '@material-ui/icons/Info';\nimport api from '../../../api/api';\nimport styles from './messageList.module.css';\nimport DropDown from './dropDown';\nimport Send from '@material-ui/icons/SendSharp';\n\nexport default function MessageList(props) {\n  const MY_USER_ID = localStorage.getItem('user_id');\n  let [messages, setMessages] = useState([]);\n  const loadMessages = (receiver=props.receiver) => {\n    console.log(props.receiver);\n      api.getMessages(props.receiver).then(res => {\n        //Sample response: {\"from_sender\": \n        //                          [{\"sender\": \"sagar\", \"receiver\": \"prawesh\", \"message\": \"Message seen\", \"timestamp\": \"2020-09-27T02:03:58.310166Z\"}], \n        //                  \"to_sender\": \n        //                          [{\"sender\": \"prawesh\", \"receiver\": \"sagar\", \"message\": \"Hello, just test\", \"timestamp\": \"2020-09-27T02:03:47.940499Z\"}]}\n        const newMessages = [...res.data.from_sender,...res.data.to_sender]\n        newMessages.sort(function(x, y){\n          return new Date(x.timestamp) - new Date(y.timestamp);\n        })\n        messages.push(...newMessages);\n        setMessages(newMessages);\n        props.onMessagesUpdate();\n      }).catch(err => console.log(err))\n  }\n\n  // This is the polling function\n  let reloadMessages = (receiver=props.receiver) => {\n    api.getMessages(receiver).then(res => {\n      const newLen = (res.data.from_sender.length + res.data.to_sender.length );\n      if (newLen> messages.length){\n        const newMessages = [...res.data.from_sender,...res.data.to_sender]\n        newMessages.sort(function(x, y){\n          return new Date(x.timestamp) - new Date(y.timestamp);\n        })\n        messages.push(...newMessages.slice(-(newLen-messages.length) ));\n        messages = [...messages]\n        setMessages(messages);\n        props.onMessagesUpdate();\n      }\n    }).catch(err => console.log(err))\n  }\n\n  let sendMessage = ( messageText) => {\n    const message_data = {\n      receiver: props.receiver,\n      message: messageText\n    }\n    api.sendMessage(message_data).then(res => {\n      console.log('message was successfully sent!');\n      reloadMessages();\n    }).catch(err => console.log(err))\n  }\n  const renderMessages = () => {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.sender === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push(\n        <Message\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n    return tempMessages;\n  }\n\n  const onMessageEvent = (event) => {\n    if(typeof event['data'] === 'string'){\n      console.log('data is not there');\n    }else{\n      reloadMessages();\n      // alert('MESSAGING HAS RECEIVED THE EVENT');\n    }\n  }\n  // debugger;\n\n\n  useEffect(() => {\n    messages = [];\n    setMessages(messages);\n    loadMessages();\n    window.addEventListener(\"message\", onMessageEvent, false);\n    // debugger\n    // if (props.name == null){\n    //   props.name = 'sailesh@sharma.com'\n    // };\n    const reload = setInterval(()=>{\n      reloadMessages();\n    }, 10000);\n\n    return () => {\n      clearInterval(reload);\n      window.removeEventListener(\"message\", onMessageEvent, false);\n    }\n\n  },[props]);\n\n  return(\n      <div className={styles.message_list}>\n\n        <Toolbar className={styles.toolbar}\n          title={props.name}\n          rightItems={[\n            <DropDown receiver={props.receiver}/>,\n          ]}\n        />\n        <Compose onEnter={sendMessage}/>\n        {props.receiver === 0 && props.name === ''?\n        <div style={{width:'40%', textAlign:'center', margin:'10% auto 0 auto'}}>\n          <Send style={{color:\"#2B64D2\", fontSize:80, transform: \"translateY(50%) rotate(-45deg)\", marginBottom:'35px'}} />\n          <p>Please select a name from list to start chatting.</p>\n          <p>If the list is empty, the only way to start a conversation is to visit user's profile and click on message button.</p>\n        </div>:\n        <div className={styles.message_list_container}>{renderMessages()}</div>}\n\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}