{"ast":null,"code":"var _jsxFileName = \"/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/LocationTextField/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { getLatLng } from '../api/api';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  }\n}));\nexport default function GoogleMaps(props) {\n  _s();\n\n  const classes = useStyles();\n  let defaultValue = null;\n\n  if ('information' in props && 'defaultValue' in props) {\n    defaultValue = props.defaultValue;\n  }\n\n  const [value, setValue] = React.useState(defaultValue);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyBQbOVpM2UKKRF82lw8OVr2KhKKysfjZSU&libraries=places', document.querySelector('head'), 'google-maps');\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"google-map-demo\",\n    style: props.type === 'side' ? {\n      width: props.width,\n      marginTop: '17px'\n    } : {\n      width: props.width,\n      marginTop: '17px'\n    },\n    getOptionLabel: option => typeof option === 'string' ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: (event, newValue) => {\n      if (newValue) {\n        getLatLng(newValue.description).then(res => {\n          const data = res.data.results[0];\n          const returnVal = {\n            'address': newValue.description,\n            ...data.geometry.location\n          };\n          returnVal['long'] = returnVal['lng'];\n          props.setLocation({ ...props.information,\n            ...returnVal\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        const newProps = { ...props.information\n        };\n        delete newProps['lat'];\n        delete newProps['long'];\n        delete newProps['address'];\n\n        if (props.setLocation) {\n          props.setLocation(newProps);\n        }\n      }\n\n      setOptions(newValue ? [newValue, ...options] : options);\n      setValue(newValue);\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({\n      style: {\n        borderWidth: '10px'\n      }\n    }, params, {\n      placeholder: \"Where is your work?\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    })),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(LocationOnIcon, {\n        className: classes.icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }, parts.map((part, index) => /*#__PURE__*/React.createElement(\"span\", {\n        key: index,\n        style: {\n          fontWeight: part.highlight ? 700 : 400\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }\n      }, part.text)), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }\n      }, option.structured_formatting.secondary_text)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(GoogleMaps, \"lvdRKphUNrGmxY1GLh4OKqBfXiY=\", false, function () {\n  return [useStyles];\n});\n\n_c = GoogleMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMaps\");","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/BookTrades/BookTrades-Web/src/components/LocationTextField/index.js"],"names":["React","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","getLatLng","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","GoogleMaps","props","classes","defaultValue","value","setValue","useState","inputValue","setInputValue","options","setOptions","loaded","useRef","window","querySelector","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","undefined","input","results","newOptions","type","width","marginTop","option","description","x","event","newValue","then","res","data","returnVal","geometry","location","setLocation","information","catch","err","console","log","newProps","newInputValue","params","borderWidth","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport {getLatLng} from '../api/api';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function GoogleMaps(props) {\n  const classes = useStyles();\n  let defaultValue = null;\n  if ('information' in props && 'defaultValue' in props){\n    defaultValue = props.defaultValue\n  }\n  const [value, setValue] = React.useState(defaultValue);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(\n        'https://maps.googleapis.com/maps/api/js?key=AIzaSyBQbOVpM2UKKRF82lw8OVr2KhKKysfjZSU&libraries=places',\n        document.querySelector('head'),\n        'google-maps',\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    [],\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id=\"google-map-demo\"\n      style={props.type==='side'?{ width: props.width, \n        marginTop: '17px'}:{ width: props.width, \n        marginTop: '17px'}}\n      getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        if ( newValue ){\n          getLatLng(newValue.description).then(res => {\n            const data = res.data.results[0]\n            const returnVal = {\n              'address': newValue.description,\n              ...data.geometry.location\n            }\n            returnVal['long'] = returnVal['lng']\n            props.setLocation({...props.information, ...returnVal})\n          }).catch(err => {\n            console.log(err)\n          });\n        } else{\n          const newProps = {...props.information}\n          delete newProps['lat']\n          delete newProps['long']\n          delete newProps['address']\n          if(props.setLocation){\n            props.setLocation(newProps)\n          }\n        }\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField style={{borderWidth:'10px'}} {...params}  \n        placeholder='Where is your work?' fullWidth       \n        />\n      )}\n      renderOption={(option) => {\n        const matches = option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length]),\n        );\n        return (\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <LocationOnIcon className={classes.icon} />\n            </Grid>\n            <Grid item xs>\n              {parts.map((part, index) => (\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                  {part.text}\n                </span>\n              ))}\n\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {option.structured_formatting.secondary_text}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }}\n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}