"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var utils_1 = require("./utils");
var useRef = React.useRef, useState = React.useState, useCallback = React.useCallback;
var defaultErrors = {
    maxFileSize: false,
    maxNumber: false,
    acceptType: false,
    resolution: false,
};
var defaultNullIndex = -1;
var ImageUploading = function (_a) {
    var _b = _a.multiple, multiple = _b === void 0 ? false : _b, onChange = _a.onChange, _c = _a.maxNumber, maxNumber = _c === void 0 ? 1000 : _c, children = _a.children, _d = _a.value, value = _d === void 0 ? [] : _d, acceptType = _a.acceptType, maxFileSize = _a.maxFileSize, resolutionWidth = _a.resolutionWidth, resolutionHeight = _a.resolutionHeight, resolutionType = _a.resolutionType, onError = _a.onError, _e = _a.dataURLKey, dataURLKey = _e === void 0 ? 'dataURL' : _e;
    var inputRef = useRef(null);
    var _f = useState(defaultNullIndex), keyUpdate = _f[0], setKeyUpdate = _f[1];
    var _g = useState(__assign({}, defaultErrors)), errors = _g[0], setErrors = _g[1];
    var _h = useState(false), isDragging = _h[0], setIsDragging = _h[1];
    var handleClickInput = useCallback(function () {
        inputRef.current && inputRef.current.click();
    }, [inputRef]);
    var onImageUpload = useCallback(function () {
        setKeyUpdate(function (prevKey) {
            if (prevKey >= 0) {
                return defaultNullIndex;
            }
            return prevKey;
        });
        handleClickInput();
    }, [handleClickInput]);
    var onImageRemoveAll = useCallback(function () {
        onChange && onChange([]);
    }, [onChange]);
    var onImageRemove = function (index) {
        var updatedList = __spreadArrays(value);
        if (Array.isArray(index)) {
            index.forEach(function (i) {
                updatedList.splice(i, 1);
            });
        }
        else {
            updatedList.splice(index, 1);
        }
        onChange && onChange(updatedList);
    };
    var onImageUpdate = function (index) {
        setKeyUpdate(index);
        handleClickInput();
    };
    var getListFile = function (files) {
        var promiseFiles = [];
        for (var i = 0; i < files.length; i++) {
            promiseFiles.push(utils_1.getBase64(files[i]));
        }
        return Promise.all(promiseFiles).then(function (fileListBase64) {
            var fileList = fileListBase64.map(function (base64, index) {
                var _a;
                return (_a = {},
                    _a[dataURLKey] = base64,
                    _a.file = files[index],
                    _a);
            });
            return fileList;
        });
    };
    var validate = function (fileList) { return __awaiter(void 0, void 0, void 0, function () {
        var newErrors, i, _a, file, dataURL, fileType, type, checkRes;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    newErrors = __assign({}, defaultErrors);
                    if (!(maxNumber &&
                        keyUpdate === defaultNullIndex &&
                        fileList.length + value.length > maxNumber)) return [3 /*break*/, 1];
                    newErrors.maxNumber = true;
                    return [3 /*break*/, 5];
                case 1:
                    i = 0;
                    _b.label = 2;
                case 2:
                    if (!(i < fileList.length)) return [3 /*break*/, 5];
                    _a = fileList[i], file = _a.file, dataURL = _a.dataURL;
                    if (file) {
                        fileType = file.type;
                        if (!fileType.includes('image')) {
                            newErrors.acceptType = true;
                            return [3 /*break*/, 5];
                        }
                        if (maxFileSize) {
                            if (file.size > maxFileSize) {
                                newErrors.maxFileSize = true;
                                return [3 /*break*/, 5];
                            }
                        }
                        if (acceptType && acceptType.length > 0) {
                            type = file.name.split('.').pop() || '';
                            if (acceptType.indexOf(type) < 0) {
                                newErrors.acceptType = true;
                                return [3 /*break*/, 5];
                            }
                        }
                    }
                    if (!(dataURL && resolutionType)) return [3 /*break*/, 4];
                    return [4 /*yield*/, utils_1.checkResolution(dataURL, resolutionType, resolutionWidth, resolutionHeight)];
                case 3:
                    checkRes = _b.sent();
                    if (!checkRes) {
                        newErrors.resolution = true;
                        return [3 /*break*/, 5];
                    }
                    _b.label = 4;
                case 4:
                    i++;
                    return [3 /*break*/, 2];
                case 5:
                    setErrors(newErrors);
                    if (Object.values(newErrors).find(Boolean)) {
                        onError && onError(newErrors, fileList);
                        return [2 /*return*/, false];
                    }
                    return [2 /*return*/, true];
            }
        });
    }); };
    var handleChange = function (files) { return __awaiter(void 0, void 0, void 0, function () {
        var fileList, checkValidate, updatedFileList, addUpdateIndex, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!files) return [3 /*break*/, 3];
                    return [4 /*yield*/, getListFile(files)];
                case 1:
                    fileList = _a.sent();
                    if (!(fileList.length > 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, validate(fileList)];
                case 2:
                    checkValidate = _a.sent();
                    if (checkValidate) {
                        updatedFileList = void 0;
                        addUpdateIndex = [];
                        if (keyUpdate > defaultNullIndex) {
                            updatedFileList = __spreadArrays(value);
                            updatedFileList[keyUpdate] = fileList[0];
                            addUpdateIndex.push(keyUpdate);
                        }
                        else {
                            if (multiple) {
                                updatedFileList = __spreadArrays(value, fileList);
                                for (i = value.length; i < updatedFileList.length; i++) {
                                    addUpdateIndex.push(i);
                                }
                            }
                            else {
                                updatedFileList = [fileList[0]];
                                addUpdateIndex.push(0);
                            }
                        }
                        onChange && onChange(updatedFileList, addUpdateIndex);
                    }
                    _a.label = 3;
                case 3:
                    keyUpdate > defaultNullIndex && setKeyUpdate(defaultNullIndex);
                    return [2 /*return*/];
            }
        });
    }); };
    var onInputChange = function (e) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, handleChange(e.target.files)];
                case 1:
                    _a.sent();
                    if (inputRef.current)
                        inputRef.current.value = '';
                    return [2 /*return*/];
            }
        });
    }); };
    var acceptString = acceptType && acceptType.length > 0
        ? acceptType.map(function (item) { return "." + item; }).join(', ')
        : 'image/*';
    var handleDrag = function (ev) {
        ev.preventDefault();
        ev.stopPropagation();
    };
    var handleDragIn = function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
            setIsDragging(true);
        }
    };
    var handleDragOut = function (e) {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);
    };
    var handleDrop = function (e) {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);
        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
            handleChange(e.dataTransfer.files);
            e.dataTransfer.clearData();
        }
    };
    return (React.createElement(React.Fragment, null,
        React.createElement("input", { type: "file", accept: acceptString, ref: inputRef, multiple: multiple && keyUpdate === defaultNullIndex, onChange: onInputChange, style: { display: 'none' } }),
        children &&
            children({
                imageList: value,
                onImageUpload: onImageUpload,
                onImageRemoveAll: onImageRemoveAll,
                onImageUpdate: onImageUpdate,
                onImageRemove: onImageRemove,
                errors: errors,
                dragProps: {
                    onDrop: handleDrop,
                    onDragEnter: handleDragIn,
                    onDragLeave: handleDragOut,
                    onDragOver: handleDrag,
                },
                isDragging: isDragging,
            })));
};
exports.default = ImageUploading;
//# sourceMappingURL=index.js.map